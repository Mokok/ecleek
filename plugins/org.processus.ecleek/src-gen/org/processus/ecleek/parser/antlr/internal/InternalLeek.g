/*
* generated by Xtext
*/
grammar InternalLeek;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.processus.ecleek.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.processus.ecleek.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.processus.ecleek.services.LeekGrammarAccess;

}

@parser::members {

 	private LeekGrammarAccess grammarAccess;
 	
    public InternalLeekParser(TokenStream input, LeekGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Script";	
   	}
   	
   	@Override
   	protected LeekGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleScript
entryRuleScript returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getScriptRule()); }
	 iv_ruleScript=ruleScript 
	 { $current=$iv_ruleScript.current; } 
	 EOF 
;

// Rule Script
ruleScript returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getScriptAccess().getStatementsStatementParserRuleCall_0()); 
	    }
		lv_statements_0_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getScriptRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_0_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)*
;





// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	 iv_ruleStatement=ruleStatement 
	 { $current=$iv_ruleStatement.current; } 
	 EOF 
;

// Rule Statement
ruleStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getIncludeParserRuleCall_0_0()); 
    }
    this_Include_0=ruleInclude
    { 
        $current = $this_Include_0.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_1=';' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getStatementAccess().getSemicolonKeyword_0_1());
    }
)
    |(
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getGlobalDeclarationParserRuleCall_1_0()); 
    }
    this_GlobalDeclaration_2=ruleGlobalDeclaration
    { 
        $current = $this_GlobalDeclaration_2.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getStatementAccess().getSemicolonKeyword_1_1());
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getFunctionDeclarationParserRuleCall_2()); 
    }
    this_FunctionDeclaration_4=ruleFunctionDeclaration
    { 
        $current = $this_FunctionDeclaration_4.current; 
        afterParserOrEnumRuleCall();
    }

    |(
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getLocalDeclarationParserRuleCall_3_0()); 
    }
    this_LocalDeclaration_5=ruleLocalDeclaration
    { 
        $current = $this_LocalDeclaration_5.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_6=';' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getStatementAccess().getSemicolonKeyword_3_1());
    }
)
    |(
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getFunctionCallParserRuleCall_4_0()); 
    }
    this_FunctionCall_7=ruleFunctionCall
    { 
        $current = $this_FunctionCall_7.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_8=';' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getStatementAccess().getSemicolonKeyword_4_1());
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getIterationParserRuleCall_5()); 
    }
    this_Iteration_9=ruleIteration
    { 
        $current = $this_Iteration_9.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getIfParserRuleCall_6()); 
    }
    this_If_10=ruleIf
    { 
        $current = $this_If_10.current; 
        afterParserOrEnumRuleCall();
    }

    |(
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getAffectationStatementParserRuleCall_7_0()); 
    }
    this_AffectationStatement_11=ruleAffectationStatement
    { 
        $current = $this_AffectationStatement_11.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_12=';' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getStatementAccess().getSemicolonKeyword_7_1());
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getStatementBlockParserRuleCall_8()); 
    }
    this_StatementBlock_13=ruleStatementBlock
    { 
        $current = $this_StatementBlock_13.current; 
        afterParserOrEnumRuleCall();
    }

    |(
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getReturnStatementParserRuleCall_9_0()); 
    }
    this_ReturnStatement_14=ruleReturnStatement
    { 
        $current = $this_ReturnStatement_14.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_15=';' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getStatementAccess().getSemicolonKeyword_9_1());
    }
)
    |(
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getBreakStatementParserRuleCall_10_0()); 
    }
    this_BreakStatement_16=ruleBreakStatement
    { 
        $current = $this_BreakStatement_16.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_17=';' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getStatementAccess().getSemicolonKeyword_10_1());
    }
)
    |(
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getContinueStatementParserRuleCall_11_0()); 
    }
    this_ContinueStatement_18=ruleContinueStatement
    { 
        $current = $this_ContinueStatement_18.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_19=';' 
    {
    	newLeafNode(otherlv_19, grammarAccess.getStatementAccess().getSemicolonKeyword_11_1());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getStatementAccess().getEmptyStatementAction_12_0(),
            $current);
    }
)	otherlv_21=';' 
    {
    	newLeafNode(otherlv_21, grammarAccess.getStatementAccess().getSemicolonKeyword_12_1());
    }
))
;





// Entry rule entryRuleBreakStatement
entryRuleBreakStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBreakStatementRule()); }
	 iv_ruleBreakStatement=ruleBreakStatement 
	 { $current=$iv_ruleBreakStatement.current; } 
	 EOF 
;

// Rule BreakStatement
ruleBreakStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getBreakStatementAccess().getBreakStatementAction_0(),
            $current);
    }
)	otherlv_1='break' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getBreakStatementAccess().getBreakKeyword_1());
    }
)
;





// Entry rule entryRuleContinueStatement
entryRuleContinueStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getContinueStatementRule()); }
	 iv_ruleContinueStatement=ruleContinueStatement 
	 { $current=$iv_ruleContinueStatement.current; } 
	 EOF 
;

// Rule ContinueStatement
ruleContinueStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getContinueStatementAccess().getContinueStatementAction_0(),
            $current);
    }
)	otherlv_1='continue' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getContinueStatementAccess().getContinueKeyword_1());
    }
)
;





// Entry rule entryRuleStatementBlock
entryRuleStatementBlock returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatementBlockRule()); }
	 iv_ruleStatementBlock=ruleStatementBlock 
	 { $current=$iv_ruleStatementBlock.current; } 
	 EOF 
;

// Rule StatementBlock
ruleStatementBlock returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='{' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getStatementBlockAccess().getLeftCurlyBracketKeyword_0());
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getStatementBlockAccess().getStatementBlockAction_1(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getStatementBlockAccess().getStatementsStatementParserRuleCall_2_0()); 
	    }
		lv_statements_2_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementBlockRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_2_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getStatementBlockAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleAffectationStatement
entryRuleAffectationStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAffectationStatementRule()); }
	 iv_ruleAffectationStatement=ruleAffectationStatement 
	 { $current=$iv_ruleAffectationStatement.current; } 
	 EOF 
;

// Rule AffectationStatement
ruleAffectationStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((	ruleAffectationDecrement)=>
    { 
        newCompositeNode(grammarAccess.getAffectationStatementAccess().getAffectationDecrementParserRuleCall_0()); 
    }
    this_AffectationDecrement_0=ruleAffectationDecrement
    { 
        $current = $this_AffectationDecrement_0.current; 
        afterParserOrEnumRuleCall();
    }
)
    |((	ruleAffectationIncrement)=>
    { 
        newCompositeNode(grammarAccess.getAffectationStatementAccess().getAffectationIncrementParserRuleCall_1()); 
    }
    this_AffectationIncrement_1=ruleAffectationIncrement
    { 
        $current = $this_AffectationIncrement_1.current; 
        afterParserOrEnumRuleCall();
    }
)
    |((	ruleAffectationPostfixStatement)=>
    { 
        newCompositeNode(grammarAccess.getAffectationStatementAccess().getAffectationPostfixStatementParserRuleCall_2()); 
    }
    this_AffectationPostfixStatement_2=ruleAffectationPostfixStatement
    { 
        $current = $this_AffectationPostfixStatement_2.current; 
        afterParserOrEnumRuleCall();
    }
)
    |((	ruleAffectationPrefixStatement)=>
    { 
        newCompositeNode(grammarAccess.getAffectationStatementAccess().getAffectationPrefixStatementParserRuleCall_3()); 
    }
    this_AffectationPrefixStatement_3=ruleAffectationPrefixStatement
    { 
        $current = $this_AffectationPrefixStatement_3.current; 
        afterParserOrEnumRuleCall();
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getAffectationStatementAccess().getAffectationParserRuleCall_4()); 
    }
    this_Affectation_4=ruleAffectation
    { 
        $current = $this_Affectation_4.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleAffectation
entryRuleAffectation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAffectationRule()); }
	 iv_ruleAffectation=ruleAffectation 
	 { $current=$iv_ruleAffectation.current; } 
	 EOF 
;

// Rule Affectation
ruleAffectation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAffectationAccess().getVariableVariableReferenceParserRuleCall_0_0()); 
	    }
		lv_variable_0_0=ruleVariableReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAffectationRule());
	        }
       		set(
       			$current, 
       			"variable",
        		lv_variable_0_0, 
        		"VariableReference");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAffectationAccess().getEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAffectationAccess().getValueExpressionParserRuleCall_2_0()); 
	    }
		lv_value_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAffectationRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleAffectationDecrement
entryRuleAffectationDecrement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAffectationDecrementRule()); }
	 iv_ruleAffectationDecrement=ruleAffectationDecrement 
	 { $current=$iv_ruleAffectationDecrement.current; } 
	 EOF 
;

// Rule AffectationDecrement
ruleAffectationDecrement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAffectationDecrementAccess().getVariableVariableReferenceParserRuleCall_0_0()); 
	    }
		lv_variable_0_0=ruleVariableReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAffectationDecrementRule());
	        }
       		set(
       			$current, 
       			"variable",
        		lv_variable_0_0, 
        		"VariableReference");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='-=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAffectationDecrementAccess().getHyphenMinusEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAffectationDecrementAccess().getDecrementExpressionParserRuleCall_2_0()); 
	    }
		lv_decrement_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAffectationDecrementRule());
	        }
       		set(
       			$current, 
       			"decrement",
        		lv_decrement_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleAffectationIncrement
entryRuleAffectationIncrement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAffectationIncrementRule()); }
	 iv_ruleAffectationIncrement=ruleAffectationIncrement 
	 { $current=$iv_ruleAffectationIncrement.current; } 
	 EOF 
;

// Rule AffectationIncrement
ruleAffectationIncrement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAffectationIncrementAccess().getVariableVariableReferenceParserRuleCall_0_0()); 
	    }
		lv_variable_0_0=ruleVariableReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAffectationIncrementRule());
	        }
       		set(
       			$current, 
       			"variable",
        		lv_variable_0_0, 
        		"VariableReference");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='+=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAffectationIncrementAccess().getPlusSignEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAffectationIncrementAccess().getIncrementExpressionParserRuleCall_2_0()); 
	    }
		lv_increment_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAffectationIncrementRule());
	        }
       		set(
       			$current, 
       			"increment",
        		lv_increment_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleAffectationPostfixStatement
entryRuleAffectationPostfixStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAffectationPostfixStatementRule()); }
	 iv_ruleAffectationPostfixStatement=ruleAffectationPostfixStatement 
	 { $current=$iv_ruleAffectationPostfixStatement.current; } 
	 EOF 
;

// Rule AffectationPostfixStatement
ruleAffectationPostfixStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAffectationPostfixStatementAccess().getVariableReferenceParserRuleCall_0()); 
    }
    this_VariableReference_0=ruleVariableReference
    { 
        $current = $this_VariableReference_0.current; 
        afterParserOrEnumRuleCall();
    }
(((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAffectationPostfixStatementAccess().getPostfixDecrementValueAction_1_0_0(),
            $current);
    }
)	otherlv_2='--' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAffectationPostfixStatementAccess().getHyphenMinusHyphenMinusKeyword_1_0_1());
    }
)
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAffectationPostfixStatementAccess().getPostfixIncrementValueAction_1_1_0(),
            $current);
    }
)	otherlv_4='++' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAffectationPostfixStatementAccess().getPlusSignPlusSignKeyword_1_1_1());
    }
)))
;





// Entry rule entryRuleAffectationPrefixStatement
entryRuleAffectationPrefixStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAffectationPrefixStatementRule()); }
	 iv_ruleAffectationPrefixStatement=ruleAffectationPrefixStatement 
	 { $current=$iv_ruleAffectationPrefixStatement.current; } 
	 EOF 
;

// Rule AffectationPrefixStatement
ruleAffectationPrefixStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAffectationPrefixStatementAccess().getPrefixDecrementAction_0_0_0(),
            $current);
    }
)	otherlv_1='--' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAffectationPrefixStatementAccess().getHyphenMinusHyphenMinusKeyword_0_0_1());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAffectationPrefixStatementAccess().getPrefixIncrementAction_0_1_0(),
            $current);
    }
)	otherlv_3='++' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAffectationPrefixStatementAccess().getPlusSignPlusSignKeyword_0_1_1());
    }
))(
(
		{ 
	        newCompositeNode(grammarAccess.getAffectationPrefixStatementAccess().getRightVariableReferenceParserRuleCall_1_0()); 
	    }
		lv_right_4_0=ruleVariableReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAffectationPrefixStatementRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_4_0, 
        		"VariableReference");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleIf
entryRuleIf returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIfRule()); }
	 iv_ruleIf=ruleIf 
	 { $current=$iv_ruleIf.current; } 
	 EOF 
;

// Rule If
ruleIf returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='if' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getIfAccess().getIfKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getIfAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfAccess().getConditionIfConditionParserRuleCall_2_0()); 
	    }
		lv_condition_2_0=ruleIfCondition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfRule());
	        }
       		set(
       			$current, 
       			"condition",
        		lv_condition_2_0, 
        		"IfCondition");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getIfAccess().getRightParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfAccess().getThenStatementParserRuleCall_4_0()); 
	    }
		lv_then_4_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfRule());
	        }
       		set(
       			$current, 
       			"then",
        		lv_then_4_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)(((	'else' 
)=>	otherlv_5='else' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getIfAccess().getElseKeyword_5_0());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getIfAccess().getElseStatementParserRuleCall_5_1_0()); 
	    }
		lv_else_6_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfRule());
	        }
       		set(
       			$current, 
       			"else",
        		lv_else_6_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleIfCondition
entryRuleIfCondition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIfConditionRule()); }
	 iv_ruleIfCondition=ruleIfCondition 
	 { $current=$iv_ruleIfCondition.current; } 
	 EOF 
;

// Rule IfCondition
ruleIfCondition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((	ruleAffectation)=>
    { 
        newCompositeNode(grammarAccess.getIfConditionAccess().getAffectationParserRuleCall_0()); 
    }
    this_Affectation_0=ruleAffectation
    { 
        $current = $this_Affectation_0.current; 
        afterParserOrEnumRuleCall();
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getIfConditionAccess().getExpressionParserRuleCall_1()); 
    }
    this_Expression_1=ruleExpression
    { 
        $current = $this_Expression_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleIteration
entryRuleIteration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIterationRule()); }
	 iv_ruleIteration=ruleIteration 
	 { $current=$iv_ruleIteration.current; } 
	 EOF 
;

// Rule Iteration
ruleIteration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getIterationAccess().getWhileParserRuleCall_0()); 
    }
    this_While_0=ruleWhile
    { 
        $current = $this_While_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getIterationAccess().getForInParserRuleCall_1()); 
    }
    this_ForIn_1=ruleForIn
    { 
        $current = $this_ForIn_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getIterationAccess().getForParserRuleCall_2()); 
    }
    this_For_2=ruleFor
    { 
        $current = $this_For_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleWhile
entryRuleWhile returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getWhileRule()); }
	 iv_ruleWhile=ruleWhile 
	 { $current=$iv_ruleWhile.current; } 
	 EOF 
;

// Rule While
ruleWhile returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='while' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getWhileAccess().getWhileKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getWhileAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWhileAccess().getConditionExpressionParserRuleCall_2_0()); 
	    }
		lv_condition_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWhileRule());
	        }
       		set(
       			$current, 
       			"condition",
        		lv_condition_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getWhileAccess().getRightParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWhileAccess().getStatementStatementParserRuleCall_4_0()); 
	    }
		lv_statement_4_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWhileRule());
	        }
       		set(
       			$current, 
       			"statement",
        		lv_statement_4_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleFor
entryRuleFor returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getForRule()); }
	 iv_ruleFor=ruleFor 
	 { $current=$iv_ruleFor.current; } 
	 EOF 
;

// Rule For
ruleFor returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='for' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getForAccess().getForKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getForAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForAccess().getInitializerForInitializerParserRuleCall_2_0()); 
	    }
		lv_initializer_2_0=ruleForInitializer		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForRule());
	        }
       		set(
       			$current, 
       			"initializer",
        		lv_initializer_2_0, 
        		"ForInitializer");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getForAccess().getSemicolonKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForAccess().getConditionExpressionParserRuleCall_4_0()); 
	    }
		lv_condition_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForRule());
	        }
       		set(
       			$current, 
       			"condition",
        		lv_condition_4_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getForAccess().getSemicolonKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForAccess().getIncrementForAffectationParserRuleCall_6_0()); 
	    }
		lv_increment_6_0=ruleForAffectation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForRule());
	        }
       		set(
       			$current, 
       			"increment",
        		lv_increment_6_0, 
        		"ForAffectation");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_7=')' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getForAccess().getRightParenthesisKeyword_7());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForAccess().getStatementStatementParserRuleCall_8_0()); 
	    }
		lv_statement_8_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForRule());
	        }
       		set(
       			$current, 
       			"statement",
        		lv_statement_8_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleForIn
entryRuleForIn returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getForInRule()); }
	 iv_ruleForIn=ruleForIn 
	 { $current=$iv_ruleForIn.current; } 
	 EOF 
;

// Rule ForIn
ruleForIn returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='for' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getForInAccess().getForKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getForInAccess().getLeftParenthesisKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getForInAccess().getKeyForInVariableReferenceParserRuleCall_2_0_0()); 
	    }
		lv_key_2_0=ruleForInVariableReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForInRule());
	        }
       		set(
       			$current, 
       			"key",
        		lv_key_2_0, 
        		"ForInVariableReference");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=':' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getForInAccess().getColonKeyword_2_1());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getForInAccess().getValueForInVariableReferenceParserRuleCall_3_0()); 
	    }
		lv_value_4_0=ruleForInVariableReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForInRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_4_0, 
        		"ForInVariableReference");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5='in' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getForInAccess().getInKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForInAccess().getArrayExpressionParserRuleCall_5_0()); 
	    }
		lv_array_6_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForInRule());
	        }
       		set(
       			$current, 
       			"array",
        		lv_array_6_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_7=')' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getForInAccess().getRightParenthesisKeyword_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForInAccess().getStatementStatementParserRuleCall_7_0()); 
	    }
		lv_statement_8_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForInRule());
	        }
       		set(
       			$current, 
       			"statement",
        		lv_statement_8_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleForInVariableReference
entryRuleForInVariableReference returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getForInVariableReferenceRule()); }
	 iv_ruleForInVariableReference=ruleForInVariableReference 
	 { $current=$iv_ruleForInVariableReference.current; } 
	 EOF 
;

// Rule ForInVariableReference
ruleForInVariableReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='var' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getForInVariableReferenceAccess().getVarKeyword_0_0());
    }

    { 
        newCompositeNode(grammarAccess.getForInVariableReferenceAccess().getVariableDeclarationUnitializedParserRuleCall_0_1()); 
    }
    this_VariableDeclarationUnitialized_1=ruleVariableDeclarationUnitialized
    { 
        $current = $this_VariableDeclarationUnitialized_1.current; 
        afterParserOrEnumRuleCall();
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getForInVariableReferenceAccess().getVariableReferenceSimpleParserRuleCall_1()); 
    }
    this_VariableReferenceSimple_2=ruleVariableReferenceSimple
    { 
        $current = $this_VariableReferenceSimple_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleForInitializer
entryRuleForInitializer returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getForInitializerRule()); }
	 iv_ruleForInitializer=ruleForInitializer 
	 { $current=$iv_ruleForInitializer.current; } 
	 EOF 
;

// Rule ForInitializer
ruleForInitializer returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='var' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getForInitializerAccess().getVarKeyword_0_0());
    }

    { 
        newCompositeNode(grammarAccess.getForInitializerAccess().getVariableDeclarationWithValueParserRuleCall_0_1()); 
    }
    this_VariableDeclarationWithValue_1=ruleVariableDeclarationWithValue
    { 
        $current = $this_VariableDeclarationWithValue_1.current; 
        afterParserOrEnumRuleCall();
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getForInitializerAccess().getAffectationParserRuleCall_1()); 
    }
    this_Affectation_2=ruleAffectation
    { 
        $current = $this_Affectation_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleForAffectation
entryRuleForAffectation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getForAffectationRule()); }
	 iv_ruleForAffectation=ruleForAffectation 
	 { $current=$iv_ruleForAffectation.current; } 
	 EOF 
;

// Rule ForAffectation
ruleForAffectation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((	ruleAffectation)=>
    { 
        newCompositeNode(grammarAccess.getForAffectationAccess().getAffectationParserRuleCall_0()); 
    }
    this_Affectation_0=ruleAffectation
    { 
        $current = $this_Affectation_0.current; 
        afterParserOrEnumRuleCall();
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getForAffectationAccess().getExpressionParserRuleCall_1()); 
    }
    this_Expression_1=ruleExpression
    { 
        $current = $this_Expression_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleFunctionDeclaration
entryRuleFunctionDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionDeclarationRule()); }
	 iv_ruleFunctionDeclaration=ruleFunctionDeclaration 
	 { $current=$iv_ruleFunctionDeclaration.current; } 
	 EOF 
;

// Rule FunctionDeclaration
ruleFunctionDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='function' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFunctionDeclarationAccess().getFunctionKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getFunctionDeclarationAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFunctionDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFunctionDeclarationAccess().getLeftParenthesisKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getParametersParameterDeclarationParserRuleCall_3_0_0()); 
	    }
		lv_parameters_3_0=ruleParameterDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionDeclarationRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_3_0, 
        		"ParameterDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getFunctionDeclarationAccess().getCommaKeyword_3_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getParametersParameterDeclarationParserRuleCall_3_1_1_0()); 
	    }
		lv_parameters_5_0=ruleParameterDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionDeclarationRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_5_0, 
        		"ParameterDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getFunctionDeclarationAccess().getRightParenthesisKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getBodyStatementBlockParserRuleCall_5_0()); 
	    }
		lv_body_7_0=ruleStatementBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionDeclarationRule());
	        }
       		set(
       			$current, 
       			"body",
        		lv_body_7_0, 
        		"StatementBlock");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleParameterDeclaration
entryRuleParameterDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterDeclarationRule()); }
	 iv_ruleParameterDeclaration=ruleParameterDeclaration 
	 { $current=$iv_ruleParameterDeclaration.current; } 
	 EOF 
;

// Rule ParameterDeclaration
ruleParameterDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_byAdress_0_0=	'@' 
    {
        newLeafNode(lv_byAdress_0_0, grammarAccess.getParameterDeclarationAccess().getByAdressCommercialAtKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParameterDeclarationRule());
	        }
       		setWithLastConsumed($current, "byAdress", true, "@");
	    }

)
)?(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getParameterDeclarationAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParameterDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleLocalDeclaration
entryRuleLocalDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLocalDeclarationRule()); }
	 iv_ruleLocalDeclaration=ruleLocalDeclaration 
	 { $current=$iv_ruleLocalDeclaration.current; } 
	 EOF 
;

// Rule LocalDeclaration
ruleLocalDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='var' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getLocalDeclarationAccess().getVarKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLocalDeclarationAccess().getVariablesVariableDeclarationParserRuleCall_1_0()); 
	    }
		lv_variables_1_0=ruleVariableDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLocalDeclarationRule());
	        }
       		add(
       			$current, 
       			"variables",
        		lv_variables_1_0, 
        		"VariableDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getLocalDeclarationAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLocalDeclarationAccess().getVariablesVariableDeclarationParserRuleCall_2_1_0()); 
	    }
		lv_variables_3_0=ruleVariableDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLocalDeclarationRule());
	        }
       		add(
       			$current, 
       			"variables",
        		lv_variables_3_0, 
        		"VariableDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleGlobalDeclaration
entryRuleGlobalDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGlobalDeclarationRule()); }
	 iv_ruleGlobalDeclaration=ruleGlobalDeclaration 
	 { $current=$iv_ruleGlobalDeclaration.current; } 
	 EOF 
;

// Rule GlobalDeclaration
ruleGlobalDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='global' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getGlobalDeclarationAccess().getGlobalKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGlobalDeclarationAccess().getVariablesVariableDeclarationParserRuleCall_1_0()); 
	    }
		lv_variables_1_0=ruleVariableDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGlobalDeclarationRule());
	        }
       		add(
       			$current, 
       			"variables",
        		lv_variables_1_0, 
        		"VariableDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getGlobalDeclarationAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGlobalDeclarationAccess().getVariablesVariableDeclarationParserRuleCall_2_1_0()); 
	    }
		lv_variables_3_0=ruleVariableDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGlobalDeclarationRule());
	        }
       		add(
       			$current, 
       			"variables",
        		lv_variables_3_0, 
        		"VariableDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleVariableDeclaration
entryRuleVariableDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableDeclarationRule()); }
	 iv_ruleVariableDeclaration=ruleVariableDeclaration 
	 { $current=$iv_ruleVariableDeclaration.current; } 
	 EOF 
;

// Rule VariableDeclaration
ruleVariableDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getVariableDeclarationAccess().getVariableDeclarationWithValueParserRuleCall_0()); 
    }
    this_VariableDeclarationWithValue_0=ruleVariableDeclarationWithValue
    { 
        $current = $this_VariableDeclarationWithValue_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getVariableDeclarationAccess().getVariableDeclarationUnitializedParserRuleCall_1()); 
    }
    this_VariableDeclarationUnitialized_1=ruleVariableDeclarationUnitialized
    { 
        $current = $this_VariableDeclarationUnitialized_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleVariableDeclarationWithValue
entryRuleVariableDeclarationWithValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableDeclarationWithValueRule()); }
	 iv_ruleVariableDeclarationWithValue=ruleVariableDeclarationWithValue 
	 { $current=$iv_ruleVariableDeclarationWithValue.current; } 
	 EOF 
;

// Rule VariableDeclarationWithValue
ruleVariableDeclarationWithValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getVariableDeclarationWithValueAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableDeclarationWithValueRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getVariableDeclarationWithValueAccess().getEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableDeclarationWithValueAccess().getValueExpressionParserRuleCall_2_0()); 
	    }
		lv_value_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableDeclarationWithValueRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleVariableDeclarationUnitialized
entryRuleVariableDeclarationUnitialized returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableDeclarationUnitializedRule()); }
	 iv_ruleVariableDeclarationUnitialized=ruleVariableDeclarationUnitialized 
	 { $current=$iv_ruleVariableDeclarationUnitialized.current; } 
	 EOF 
;

// Rule VariableDeclarationUnitialized
ruleVariableDeclarationUnitialized returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getVariableDeclarationUnitializedAccess().getNameIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableDeclarationUnitializedRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getComparisonParserRuleCall()); 
    }
    this_Comparison_0=ruleComparison
    { 
        $current = $this_Comparison_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleComparison
entryRuleComparison returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getComparisonRule()); }
	 iv_ruleComparison=ruleComparison 
	 { $current=$iv_ruleComparison.current; } 
	 EOF 
;

// Rule Comparison
ruleComparison returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getComparisonAccess().getOrParserRuleCall_0()); 
    }
    this_Or_0=ruleOr
    { 
        $current = $this_Or_0.current; 
        afterParserOrEnumRuleCall();
    }
((((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getComparisonAccess().getComparisonLeftAction_1_0_0_0(),
            $current);
    }
)	otherlv_2='===' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getComparisonAccess().getEqualsSignEqualsSignEqualsSignKeyword_1_0_0_1());
    }
)
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getComparisonAccess().getEqualsLeftAction_1_0_1_0(),
            $current);
    }
)	otherlv_4='==' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getComparisonAccess().getEqualsSignEqualsSignKeyword_1_0_1_1());
    }
)
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getComparisonAccess().getTypedDifferentLeftAction_1_0_2_0(),
            $current);
    }
)	otherlv_6='!==' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getComparisonAccess().getExclamationMarkEqualsSignEqualsSignKeyword_1_0_2_1());
    }
)
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getComparisonAccess().getDifferentLeftAction_1_0_3_0(),
            $current);
    }
)	otherlv_8='!=' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getComparisonAccess().getExclamationMarkEqualsSignKeyword_1_0_3_1());
    }
)
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getComparisonAccess().getLessOrEqualsLeftAction_1_0_4_0(),
            $current);
    }
)	otherlv_10='<=' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getComparisonAccess().getLessThanSignEqualsSignKeyword_1_0_4_1());
    }
)
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getComparisonAccess().getLessLeftAction_1_0_5_0(),
            $current);
    }
)	otherlv_12='<' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getComparisonAccess().getLessThanSignKeyword_1_0_5_1());
    }
)
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getComparisonAccess().getMoreOrEqualsLeftAction_1_0_6_0(),
            $current);
    }
)	otherlv_14='>=' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getComparisonAccess().getGreaterThanSignEqualsSignKeyword_1_0_6_1());
    }
)
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getComparisonAccess().getMoreLeftAction_1_0_7_0(),
            $current);
    }
)	otherlv_16='>' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getComparisonAccess().getGreaterThanSignKeyword_1_0_7_1());
    }
))(
(
		{ 
	        newCompositeNode(grammarAccess.getComparisonAccess().getRightOrParserRuleCall_1_1_0()); 
	    }
		lv_right_17_0=ruleOr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComparisonRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_17_0, 
        		"Or");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleOr
entryRuleOr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOrRule()); }
	 iv_ruleOr=ruleOr 
	 { $current=$iv_ruleOr.current; } 
	 EOF 
;

// Rule Or
ruleOr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getOrAccess().getAndParserRuleCall_0()); 
    }
    this_And_0=ruleAnd
    { 
        $current = $this_And_0.current; 
        afterParserOrEnumRuleCall();
    }
(((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getOrAccess().getOrLeftAction_1_0_0(),
            $current);
    }
)(	otherlv_2='or' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getOrAccess().getOrKeyword_1_0_1_0());
    }

    |	otherlv_3='||' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getOrAccess().getVerticalLineVerticalLineKeyword_1_0_1_1());
    }
))(
(
		{ 
	        newCompositeNode(grammarAccess.getOrAccess().getRightAndParserRuleCall_1_1_0()); 
	    }
		lv_right_4_0=ruleAnd		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOrRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_4_0, 
        		"And");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleAnd
entryRuleAnd returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAndRule()); }
	 iv_ruleAnd=ruleAnd 
	 { $current=$iv_ruleAnd.current; } 
	 EOF 
;

// Rule And
ruleAnd returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAndAccess().getAdditionParserRuleCall_0()); 
    }
    this_Addition_0=ruleAddition
    { 
        $current = $this_Addition_0.current; 
        afterParserOrEnumRuleCall();
    }
(((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAndAccess().getAndLeftAction_1_0_0(),
            $current);
    }
)(	otherlv_2='and' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAndAccess().getAndKeyword_1_0_1_0());
    }

    |	otherlv_3='&&' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAndAccess().getAmpersandAmpersandKeyword_1_0_1_1());
    }
))(
(
		{ 
	        newCompositeNode(grammarAccess.getAndAccess().getRightAdditionParserRuleCall_1_1_0()); 
	    }
		lv_right_4_0=ruleAddition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAndRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_4_0, 
        		"Addition");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleAddition
entryRuleAddition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAdditionRule()); }
	 iv_ruleAddition=ruleAddition 
	 { $current=$iv_ruleAddition.current; } 
	 EOF 
;

// Rule Addition
ruleAddition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAdditionAccess().getMultiplicationParserRuleCall_0()); 
    }
    this_Multiplication_0=ruleMultiplication
    { 
        $current = $this_Multiplication_0.current; 
        afterParserOrEnumRuleCall();
    }
((((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAdditionAccess().getPlusLeftAction_1_0_0_0(),
            $current);
    }
)	otherlv_2='+' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAdditionAccess().getPlusSignKeyword_1_0_0_1());
    }
)
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAdditionAccess().getMinusLeftAction_1_0_1_0(),
            $current);
    }
)	otherlv_4='-' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAdditionAccess().getHyphenMinusKeyword_1_0_1_1());
    }
))(
(
		{ 
	        newCompositeNode(grammarAccess.getAdditionAccess().getRightMultiplicationParserRuleCall_1_1_0()); 
	    }
		lv_right_5_0=ruleMultiplication		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdditionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_5_0, 
        		"Multiplication");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleMultiplication
entryRuleMultiplication returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultiplicationRule()); }
	 iv_ruleMultiplication=ruleMultiplication 
	 { $current=$iv_ruleMultiplication.current; } 
	 EOF 
;

// Rule Multiplication
ruleMultiplication returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getMultiplicationAccess().getTernaryIfParserRuleCall_0()); 
    }
    this_TernaryIf_0=ruleTernaryIf
    { 
        $current = $this_TernaryIf_0.current; 
        afterParserOrEnumRuleCall();
    }
((((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getMultiplicationAccess().getMultiLeftAction_1_0_0_0(),
            $current);
    }
)	otherlv_2='*' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getMultiplicationAccess().getAsteriskKeyword_1_0_0_1());
    }
)
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getMultiplicationAccess().getDivLeftAction_1_0_1_0(),
            $current);
    }
)	otherlv_4='/' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getMultiplicationAccess().getSolidusKeyword_1_0_1_1());
    }
))(
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicationAccess().getRightTernaryIfParserRuleCall_1_1_0()); 
	    }
		lv_right_5_0=ruleTernaryIf		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicationRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_5_0, 
        		"TernaryIf");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleTernaryIf
entryRuleTernaryIf returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTernaryIfRule()); }
	 iv_ruleTernaryIf=ruleTernaryIf 
	 { $current=$iv_ruleTernaryIf.current; } 
	 EOF 
;

// Rule TernaryIf
ruleTernaryIf returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTernaryIfAccess().getPrimaryExpressionParserRuleCall_0()); 
    }
    this_PrimaryExpression_0=rulePrimaryExpression
    { 
        $current = $this_PrimaryExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getTernaryIfAccess().getTernaryIfLeftAction_1_0(),
            $current);
    }
)	otherlv_2='?' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTernaryIfAccess().getQuestionMarkKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTernaryIfAccess().getThenPrimaryExpressionParserRuleCall_1_2_0()); 
	    }
		lv_then_3_0=rulePrimaryExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTernaryIfRule());
	        }
       		set(
       			$current, 
       			"then",
        		lv_then_3_0, 
        		"PrimaryExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=':' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getTernaryIfAccess().getColonKeyword_1_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTernaryIfAccess().getElsePrimaryExpressionParserRuleCall_1_4_0()); 
	    }
		lv_else_5_0=rulePrimaryExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTernaryIfRule());
	        }
       		set(
       			$current, 
       			"else",
        		lv_else_5_0, 
        		"PrimaryExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrimaryExpressionRule()); }
	 iv_rulePrimaryExpression=rulePrimaryExpression 
	 { $current=$iv_rulePrimaryExpression.current; } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_0_0());
    }

    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getExpressionParserRuleCall_0_1()); 
    }
    this_Expression_1=ruleExpression
    { 
        $current = $this_Expression_1.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_2=')' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_0_2());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPrimaryExpressionAccess().getUnitaryMinusAction_1_0(),
            $current);
    }
)	otherlv_4='-' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getPrimaryExpressionAccess().getHyphenMinusKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getExpressionPrimaryExpressionParserRuleCall_1_2_0()); 
	    }
		lv_expression_5_0=rulePrimaryExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryExpressionRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_5_0, 
        		"PrimaryExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPrimaryExpressionAccess().getNotAction_2_0(),
            $current);
    }
)	otherlv_7='!' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getPrimaryExpressionAccess().getExclamationMarkKeyword_2_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getExpressionPrimaryExpressionParserRuleCall_2_2_0()); 
	    }
		lv_expression_8_0=rulePrimaryExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryExpressionRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_8_0, 
        		"PrimaryExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPrimaryExpressionAccess().getRealLiteralAction_3_0(),
            $current);
    }
)(
(
		lv_value_10_0=RULE_REAL
		{
			newLeafNode(lv_value_10_0, grammarAccess.getPrimaryExpressionAccess().getValueREALTerminalRuleCall_3_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrimaryExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_10_0, 
        		"REAL");
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPrimaryExpressionAccess().getIntLiteralAction_4_0(),
            $current);
    }
)(
(
		lv_value_12_0=RULE_INT
		{
			newLeafNode(lv_value_12_0, grammarAccess.getPrimaryExpressionAccess().getValueINTTerminalRuleCall_4_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrimaryExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_12_0, 
        		"INT");
	    }

)
))
    |
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getFunctionCallParserRuleCall_5()); 
    }
    this_FunctionCall_13=ruleFunctionCall
    { 
        $current = $this_FunctionCall_13.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getPrefixParserRuleCall_6()); 
    }
    this_Prefix_14=rulePrefix
    { 
        $current = $this_Prefix_14.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getPostfixParserRuleCall_7()); 
    }
    this_Postfix_15=rulePostfix
    { 
        $current = $this_Postfix_15.current; 
        afterParserOrEnumRuleCall();
    }

    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPrimaryExpressionAccess().getStringLiteralAction_8_0(),
            $current);
    }
)(
(
		lv_value_17_0=RULE_STRING
		{
			newLeafNode(lv_value_17_0, grammarAccess.getPrimaryExpressionAccess().getValueSTRINGTerminalRuleCall_8_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrimaryExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_17_0, 
        		"STRING");
	    }

)
))
    |
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getArrayLiteralParserRuleCall_9()); 
    }
    this_ArrayLiteral_18=ruleArrayLiteral
    { 
        $current = $this_ArrayLiteral_18.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getFunctionDeclarationParserRuleCall_10()); 
    }
    this_FunctionDeclaration_19=ruleFunctionDeclaration
    { 
        $current = $this_FunctionDeclaration_19.current; 
        afterParserOrEnumRuleCall();
    }

    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPrimaryExpressionAccess().getNullLiteralAction_11_0(),
            $current);
    }
)	otherlv_21='null' 
    {
    	newLeafNode(otherlv_21, grammarAccess.getPrimaryExpressionAccess().getNullKeyword_11_1());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPrimaryExpressionAccess().getFalseLiteralAction_12_0(),
            $current);
    }
)	otherlv_23='false' 
    {
    	newLeafNode(otherlv_23, grammarAccess.getPrimaryExpressionAccess().getFalseKeyword_12_1());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPrimaryExpressionAccess().getTrueLiteralAction_13_0(),
            $current);
    }
)	otherlv_25='true' 
    {
    	newLeafNode(otherlv_25, grammarAccess.getPrimaryExpressionAccess().getTrueKeyword_13_1());
    }
))
;





// Entry rule entryRuleArrayLiteral
entryRuleArrayLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArrayLiteralRule()); }
	 iv_ruleArrayLiteral=ruleArrayLiteral 
	 { $current=$iv_ruleArrayLiteral.current; } 
	 EOF 
;

// Rule ArrayLiteral
ruleArrayLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getArrayLiteralAccess().getArrayLiteralAction_0(),
            $current);
    }
)	otherlv_1='[' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getArrayLiteralAccess().getLeftSquareBracketKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getArrayLiteralAccess().getValuesExpressionParserRuleCall_2_0_0()); 
	    }
		lv_values_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrayLiteralRule());
	        }
       		add(
       			$current, 
       			"values",
        		lv_values_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getArrayLiteralAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArrayLiteralAccess().getValuesExpressionParserRuleCall_2_1_1_0()); 
	    }
		lv_values_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrayLiteralRule());
	        }
       		add(
       			$current, 
       			"values",
        		lv_values_4_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_5=']' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getArrayLiteralAccess().getRightSquareBracketKeyword_3());
    }
)
;





// Entry rule entryRulePostfix
entryRulePostfix returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPostfixRule()); }
	 iv_rulePostfix=rulePostfix 
	 { $current=$iv_rulePostfix.current; } 
	 EOF 
;

// Rule Postfix
rulePostfix returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPostfixAccess().getVariableReferenceParserRuleCall_0()); 
    }
    this_VariableReference_0=ruleVariableReference
    { 
        $current = $this_VariableReference_0.current; 
        afterParserOrEnumRuleCall();
    }
(((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getPostfixAccess().getPostfixDecrementValueAction_1_0_0(),
            $current);
    }
)	otherlv_2='--' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPostfixAccess().getHyphenMinusHyphenMinusKeyword_1_0_1());
    }
)
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getPostfixAccess().getPostfixIncrementValueAction_1_1_0(),
            $current);
    }
)	otherlv_4='++' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getPostfixAccess().getPlusSignPlusSignKeyword_1_1_1());
    }
))?)
;





// Entry rule entryRulePrefix
entryRulePrefix returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrefixRule()); }
	 iv_rulePrefix=rulePrefix 
	 { $current=$iv_rulePrefix.current; } 
	 EOF 
;

// Rule Prefix
rulePrefix returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPrefixAccess().getPrefixDecrementAction_0_0_0(),
            $current);
    }
)	otherlv_1='--' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPrefixAccess().getHyphenMinusHyphenMinusKeyword_0_0_1());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPrefixAccess().getPrefixIncrementAction_0_1_0(),
            $current);
    }
)	otherlv_3='++' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getPrefixAccess().getPlusSignPlusSignKeyword_0_1_1());
    }
))(
(
		{ 
	        newCompositeNode(grammarAccess.getPrefixAccess().getRightVariableReferenceParserRuleCall_1_0()); 
	    }
		lv_right_4_0=ruleVariableReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrefixRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_4_0, 
        		"VariableReference");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleVariableReference
entryRuleVariableReference returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableReferenceRule()); }
	 iv_ruleVariableReference=ruleVariableReference 
	 { $current=$iv_ruleVariableReference.current; } 
	 EOF 
;

// Rule VariableReference
ruleVariableReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((	ruleVariableReferenceArray)=>
    { 
        newCompositeNode(grammarAccess.getVariableReferenceAccess().getVariableReferenceArrayParserRuleCall_0()); 
    }
    this_VariableReferenceArray_0=ruleVariableReferenceArray
    { 
        $current = $this_VariableReferenceArray_0.current; 
        afterParserOrEnumRuleCall();
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getVariableReferenceAccess().getVariableReferenceSimpleParserRuleCall_1()); 
    }
    this_VariableReferenceSimple_1=ruleVariableReferenceSimple
    { 
        $current = $this_VariableReferenceSimple_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleVariableReferenceSimple
entryRuleVariableReferenceSimple returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableReferenceSimpleRule()); }
	 iv_ruleVariableReferenceSimple=ruleVariableReferenceSimple 
	 { $current=$iv_ruleVariableReferenceSimple.current; } 
	 EOF 
;

// Rule VariableReferenceSimple
ruleVariableReferenceSimple returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableReferenceSimpleRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getVariableReferenceSimpleAccess().getVariableVariableDeclarationCrossReference_0()); 
	}

)
)
;





// Entry rule entryRuleVariableReferenceArray
entryRuleVariableReferenceArray returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableReferenceArrayRule()); }
	 iv_ruleVariableReferenceArray=ruleVariableReferenceArray 
	 { $current=$iv_ruleVariableReferenceArray.current; } 
	 EOF 
;

// Rule VariableReferenceArray
ruleVariableReferenceArray returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableReferenceArrayRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getVariableReferenceArrayAccess().getVariableVariableDeclarationCrossReference_0_0()); 
	}

)
)(	otherlv_1='[' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getVariableReferenceArrayAccess().getLeftSquareBracketKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableReferenceArrayAccess().getDimensionsExpressionParserRuleCall_1_1_0()); 
	    }
		lv_dimensions_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableReferenceArrayRule());
	        }
       		add(
       			$current, 
       			"dimensions",
        		lv_dimensions_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=']' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getVariableReferenceArrayAccess().getRightSquareBracketKeyword_1_2());
    }
)+)
;





// Entry rule entryRuleFunctionCall
entryRuleFunctionCall returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionCallRule()); }
	 iv_ruleFunctionCall=ruleFunctionCall 
	 { $current=$iv_ruleFunctionCall.current; } 
	 EOF 
;

// Rule FunctionCall
ruleFunctionCall returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getFunctionCallAccess().getFunctionCallAction_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFunctionCallRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getFunctionCallAccess().getFunctionFunctionDeclarationCrossReference_1_0()); 
	}

)
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFunctionCallAccess().getLeftParenthesisKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionCallAccess().getArgsExpressionParserRuleCall_3_0_0()); 
	    }
		lv_args_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionCallRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getFunctionCallAccess().getCommaKeyword_3_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionCallAccess().getArgsExpressionParserRuleCall_3_1_1_0()); 
	    }
		lv_args_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionCallRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_5_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getFunctionCallAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleReturnStatement
entryRuleReturnStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getReturnStatementRule()); }
	 iv_ruleReturnStatement=ruleReturnStatement 
	 { $current=$iv_ruleReturnStatement.current; } 
	 EOF 
;

// Rule ReturnStatement
ruleReturnStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getReturnStatementAccess().getReturnStatementAction_0(),
            $current);
    }
)	otherlv_1='return' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getReturnStatementAccess().getReturnKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getReturnStatementAccess().getValueExpressionParserRuleCall_2_0()); 
	    }
		lv_value_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReturnStatementRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleInclude
entryRuleInclude returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIncludeRule()); }
	 iv_ruleInclude=ruleInclude 
	 { $current=$iv_ruleInclude.current; } 
	 EOF 
;

// Rule Include
ruleInclude returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='include' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getIncludeAccess().getIncludeKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getIncludeAccess().getLeftParenthesisKeyword_1());
    }
(
(
		lv_importURI_2_0=RULE_STRING
		{
			newLeafNode(lv_importURI_2_0, grammarAccess.getIncludeAccess().getImportURISTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIncludeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"importURI",
        		lv_importURI_2_0, 
        		"STRING");
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getIncludeAccess().getRightParenthesisKeyword_3());
    }
)
;





RULE_REAL : ('0'..'9')* '.' ('0'..'9')+;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


