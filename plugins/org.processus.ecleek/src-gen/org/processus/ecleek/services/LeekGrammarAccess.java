/*
* generated by Xtext
*/
package org.processus.ecleek.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class LeekGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ScriptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Script");
		private final Assignment cStatementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cStatementsStatementParserRuleCall_0 = (RuleCall)cStatementsAssignment.eContents().get(0);
		
		//Script:
		//	statements+=Statement*;
		public ParserRule getRule() { return rule; }

		//statements+=Statement*
		public Assignment getStatementsAssignment() { return cStatementsAssignment; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_0() { return cStatementsStatementParserRuleCall_0; }
	}

	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIncludeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cGlobalDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLocalDeclarationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cFunctionDeclarationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final RuleCall cFunctionCallParserRuleCall_4_0 = (RuleCall)cGroup_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final RuleCall cForParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cWhileParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cIfParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final RuleCall cAffectationParserRuleCall_8_0 = (RuleCall)cGroup_8.eContents().get(0);
		private final Keyword cSemicolonKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final RuleCall cStatementBlockParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		
		//Statement:
		//	Include | GlobalDeclaration | LocalDeclaration | FunctionDeclaration | FunctionCall ";" | For | While | If |
		//	Affectation ";" | StatementBlock;
		public ParserRule getRule() { return rule; }

		//Include | GlobalDeclaration | LocalDeclaration | FunctionDeclaration | FunctionCall ";" | For | While | If | Affectation
		//";" | StatementBlock
		public Alternatives getAlternatives() { return cAlternatives; }

		//Include
		public RuleCall getIncludeParserRuleCall_0() { return cIncludeParserRuleCall_0; }

		//GlobalDeclaration
		public RuleCall getGlobalDeclarationParserRuleCall_1() { return cGlobalDeclarationParserRuleCall_1; }

		//LocalDeclaration
		public RuleCall getLocalDeclarationParserRuleCall_2() { return cLocalDeclarationParserRuleCall_2; }

		//FunctionDeclaration
		public RuleCall getFunctionDeclarationParserRuleCall_3() { return cFunctionDeclarationParserRuleCall_3; }

		//FunctionCall ";"
		public Group getGroup_4() { return cGroup_4; }

		//FunctionCall
		public RuleCall getFunctionCallParserRuleCall_4_0() { return cFunctionCallParserRuleCall_4_0; }

		//";"
		public Keyword getSemicolonKeyword_4_1() { return cSemicolonKeyword_4_1; }

		//For
		public RuleCall getForParserRuleCall_5() { return cForParserRuleCall_5; }

		//While
		public RuleCall getWhileParserRuleCall_6() { return cWhileParserRuleCall_6; }

		//If
		public RuleCall getIfParserRuleCall_7() { return cIfParserRuleCall_7; }

		//Affectation ";"
		public Group getGroup_8() { return cGroup_8; }

		//Affectation
		public RuleCall getAffectationParserRuleCall_8_0() { return cAffectationParserRuleCall_8_0; }

		//";"
		public Keyword getSemicolonKeyword_8_1() { return cSemicolonKeyword_8_1; }

		//StatementBlock
		public RuleCall getStatementBlockParserRuleCall_9() { return cStatementBlockParserRuleCall_9; }
	}

	public class StatementBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StatementBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cStatementBlockAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cStatementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementsStatementParserRuleCall_2_0 = (RuleCall)cStatementsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//StatementBlock:
		//	"{" {StatementBlock} statements+=Statement* "}";
		public ParserRule getRule() { return rule; }

		//"{" {StatementBlock} statements+=Statement* "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//{StatementBlock}
		public Action getStatementBlockAction_1() { return cStatementBlockAction_1; }

		//statements+=Statement*
		public Assignment getStatementsAssignment_2() { return cStatementsAssignment_2; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_2_0() { return cStatementsStatementParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class AffectationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Affectation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariableAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVariableVariableReferenceParserRuleCall_0_0 = (RuleCall)cVariableAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueExpressionParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Affectation:
		//	variable=VariableReference "=" value=Expression;
		public ParserRule getRule() { return rule; }

		//variable=VariableReference "=" value=Expression
		public Group getGroup() { return cGroup; }

		//variable=VariableReference
		public Assignment getVariableAssignment_0() { return cVariableAssignment_0; }

		//VariableReference
		public RuleCall getVariableVariableReferenceParserRuleCall_0_0() { return cVariableVariableReferenceParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value=Expression
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//Expression
		public RuleCall getValueExpressionParserRuleCall_2_0() { return cValueExpressionParserRuleCall_2_0; }
	}

	public class IfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "If");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionExpressionParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cThenAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cThenStatementParserRuleCall_4_0 = (RuleCall)cThenAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cElseKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cElseAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cElseStatementParserRuleCall_5_1_0 = (RuleCall)cElseAssignment_5_1.eContents().get(0);
		
		//If:
		//	"if" "(" condition=Expression ")" then=Statement ("else" else=Statement)?;
		public ParserRule getRule() { return rule; }

		//"if" "(" condition=Expression ")" then=Statement ("else" else=Statement)?
		public Group getGroup() { return cGroup; }

		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//condition=Expression
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }

		//Expression
		public RuleCall getConditionExpressionParserRuleCall_2_0() { return cConditionExpressionParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//then=Statement
		public Assignment getThenAssignment_4() { return cThenAssignment_4; }

		//Statement
		public RuleCall getThenStatementParserRuleCall_4_0() { return cThenStatementParserRuleCall_4_0; }

		//(=> "else" else=Statement)?
		public Group getGroup_5() { return cGroup_5; }

		//=> "else"
		public Keyword getElseKeyword_5_0() { return cElseKeyword_5_0; }

		//else=Statement
		public Assignment getElseAssignment_5_1() { return cElseAssignment_5_1; }

		//Statement
		public RuleCall getElseStatementParserRuleCall_5_1_0() { return cElseStatementParserRuleCall_5_1_0; }
	}

	public class WhileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "While");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionExpressionParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cStatementAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStatementStatementParserRuleCall_4_0 = (RuleCall)cStatementAssignment_4.eContents().get(0);
		
		//While:
		//	"while" "(" condition=Expression ")" statement=Statement;
		public ParserRule getRule() { return rule; }

		//"while" "(" condition=Expression ")" statement=Statement
		public Group getGroup() { return cGroup; }

		//"while"
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//condition=Expression
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }

		//Expression
		public RuleCall getConditionExpressionParserRuleCall_2_0() { return cConditionExpressionParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//statement=Statement
		public Assignment getStatementAssignment_4() { return cStatementAssignment_4; }

		//Statement
		public RuleCall getStatementStatementParserRuleCall_4_0() { return cStatementStatementParserRuleCall_4_0; }
	}

	public class ForElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "For");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIteratorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIteratorForIteratorParserRuleCall_2_0 = (RuleCall)cIteratorAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cStatementAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStatementStatementParserRuleCall_4_0 = (RuleCall)cStatementAssignment_4.eContents().get(0);
		
		//For:
		//	"for" "(" iterator=ForIterator ")" statement=Statement;
		public ParserRule getRule() { return rule; }

		//"for" "(" iterator=ForIterator ")" statement=Statement
		public Group getGroup() { return cGroup; }

		//"for"
		public Keyword getForKeyword_0() { return cForKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//iterator=ForIterator
		public Assignment getIteratorAssignment_2() { return cIteratorAssignment_2; }

		//ForIterator
		public RuleCall getIteratorForIteratorParserRuleCall_2_0() { return cIteratorForIteratorParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//statement=Statement
		public Assignment getStatementAssignment_4() { return cStatementAssignment_4; }

		//Statement
		public RuleCall getStatementStatementParserRuleCall_4_0() { return cStatementStatementParserRuleCall_4_0; }
	}

	public class ForIteratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ForIterator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEachIteratorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVariableIteratorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ForIterator:
		//	EachIterator | VariableIterator;
		public ParserRule getRule() { return rule; }

		//EachIterator | VariableIterator
		public Alternatives getAlternatives() { return cAlternatives; }

		//EachIterator
		public RuleCall getEachIteratorParserRuleCall_0() { return cEachIteratorParserRuleCall_0; }

		//VariableIterator
		public RuleCall getVariableIteratorParserRuleCall_1() { return cVariableIteratorParserRuleCall_1; }
	}

	public class EachIteratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EachIterator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cVarKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cKeyAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cKeyVariableDeclarationParserRuleCall_0_1_0 = (RuleCall)cKeyAssignment_0_1.eContents().get(0);
		private final Keyword cColonKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Keyword cVarKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueVariableDeclarationParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Keyword cInKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cArrayAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cArrayExpressionParserRuleCall_4_0 = (RuleCall)cArrayAssignment_4.eContents().get(0);
		
		//EachIterator:
		//	("var" key=VariableDeclaration ":")? "var" value=VariableDeclaration "in" array=Expression;
		public ParserRule getRule() { return rule; }

		//(=> "var" key=VariableDeclaration ":")? "var" value=VariableDeclaration "in" array=Expression
		public Group getGroup() { return cGroup; }

		//(=> "var" key=VariableDeclaration ":")?
		public Group getGroup_0() { return cGroup_0; }

		//=> "var"
		public Keyword getVarKeyword_0_0() { return cVarKeyword_0_0; }

		//key=VariableDeclaration
		public Assignment getKeyAssignment_0_1() { return cKeyAssignment_0_1; }

		//VariableDeclaration
		public RuleCall getKeyVariableDeclarationParserRuleCall_0_1_0() { return cKeyVariableDeclarationParserRuleCall_0_1_0; }

		//":"
		public Keyword getColonKeyword_0_2() { return cColonKeyword_0_2; }

		//"var"
		public Keyword getVarKeyword_1() { return cVarKeyword_1; }

		//value=VariableDeclaration
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//VariableDeclaration
		public RuleCall getValueVariableDeclarationParserRuleCall_2_0() { return cValueVariableDeclarationParserRuleCall_2_0; }

		//"in"
		public Keyword getInKeyword_3() { return cInKeyword_3; }

		//array=Expression
		public Assignment getArrayAssignment_4() { return cArrayAssignment_4; }

		//Expression
		public RuleCall getArrayExpressionParserRuleCall_4_0() { return cArrayExpressionParserRuleCall_4_0; }
	}

	public class VariableIteratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableIterator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInitializationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cInitializationAffectationParserRuleCall_0_0 = (RuleCall)cInitializationAssignment_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionExpressionParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cIncrementAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cIncrementExpressionParserRuleCall_4_0 = (RuleCall)cIncrementAssignment_4.eContents().get(0);
		
		//VariableIterator:
		//	initialization=Affectation ";" condition=Expression ";" increment=Expression;
		public ParserRule getRule() { return rule; }

		//initialization=Affectation ";" condition=Expression ";" increment=Expression
		public Group getGroup() { return cGroup; }

		//initialization=Affectation
		public Assignment getInitializationAssignment_0() { return cInitializationAssignment_0; }

		//Affectation
		public RuleCall getInitializationAffectationParserRuleCall_0_0() { return cInitializationAffectationParserRuleCall_0_0; }

		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }

		//condition=Expression
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }

		//Expression
		public RuleCall getConditionExpressionParserRuleCall_2_0() { return cConditionExpressionParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }

		//increment=Expression
		public Assignment getIncrementAssignment_4() { return cIncrementAssignment_4; }

		//Expression
		public RuleCall getIncrementExpressionParserRuleCall_4_0() { return cIncrementExpressionParserRuleCall_4_0; }
	}

	public class FunctionDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunctionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParameterAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParameterParameterDeclarationParserRuleCall_3_0_0 = (RuleCall)cParameterAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParameterAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParameterParameterDeclarationParserRuleCall_3_1_1_0 = (RuleCall)cParameterAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//FunctionDeclaration:
		//	"function" name=ID "(" (parameter+=ParameterDeclaration ("," parameter+=ParameterDeclaration)*)? ")";
		public ParserRule getRule() { return rule; }

		//"function" name=ID "(" (parameter+=ParameterDeclaration ("," parameter+=ParameterDeclaration)*)? ")"
		public Group getGroup() { return cGroup; }

		//"function"
		public Keyword getFunctionKeyword_0() { return cFunctionKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(parameter+=ParameterDeclaration ("," parameter+=ParameterDeclaration)*)?
		public Group getGroup_3() { return cGroup_3; }

		//parameter+=ParameterDeclaration
		public Assignment getParameterAssignment_3_0() { return cParameterAssignment_3_0; }

		//ParameterDeclaration
		public RuleCall getParameterParameterDeclarationParserRuleCall_3_0_0() { return cParameterParameterDeclarationParserRuleCall_3_0_0; }

		//("," parameter+=ParameterDeclaration)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//parameter+=ParameterDeclaration
		public Assignment getParameterAssignment_3_1_1() { return cParameterAssignment_3_1_1; }

		//ParameterDeclaration
		public RuleCall getParameterParameterDeclarationParserRuleCall_3_1_1_0() { return cParameterParameterDeclarationParserRuleCall_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class ParameterDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cByAdressAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cByAdressCommercialAtKeyword_0_0 = (Keyword)cByAdressAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//ParameterDeclaration:
		//	byAdress?="@" name=ID;
		public ParserRule getRule() { return rule; }

		//byAdress?="@" name=ID
		public Group getGroup() { return cGroup; }

		//byAdress?="@"
		public Assignment getByAdressAssignment_0() { return cByAdressAssignment_0; }

		//"@"
		public Keyword getByAdressCommercialAtKeyword_0_0() { return cByAdressCommercialAtKeyword_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class LocalDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LocalDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVariablesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariablesVariableDeclarationParserRuleCall_1_0 = (RuleCall)cVariablesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cVariablesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cVariablesVariableDeclarationParserRuleCall_2_1_0 = (RuleCall)cVariablesAssignment_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//LocalDeclaration:
		//	"var" variables+=VariableDeclaration ("," variables+=VariableDeclaration)* ";";
		public ParserRule getRule() { return rule; }

		//"var" variables+=VariableDeclaration ("," variables+=VariableDeclaration)* ";"
		public Group getGroup() { return cGroup; }

		//"var"
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }

		//variables+=VariableDeclaration
		public Assignment getVariablesAssignment_1() { return cVariablesAssignment_1; }

		//VariableDeclaration
		public RuleCall getVariablesVariableDeclarationParserRuleCall_1_0() { return cVariablesVariableDeclarationParserRuleCall_1_0; }

		//("," variables+=VariableDeclaration)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//variables+=VariableDeclaration
		public Assignment getVariablesAssignment_2_1() { return cVariablesAssignment_2_1; }

		//VariableDeclaration
		public RuleCall getVariablesVariableDeclarationParserRuleCall_2_1_0() { return cVariablesVariableDeclarationParserRuleCall_2_1_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class GlobalDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GlobalDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGlobalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVariablesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariablesVariableDeclarationParserRuleCall_1_0 = (RuleCall)cVariablesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cVariablesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cVariablesVariableDeclarationParserRuleCall_2_1_0 = (RuleCall)cVariablesAssignment_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//GlobalDeclaration:
		//	"global" variables+=VariableDeclaration ("," variables+=VariableDeclaration)* ";";
		public ParserRule getRule() { return rule; }

		//"global" variables+=VariableDeclaration ("," variables+=VariableDeclaration)* ";"
		public Group getGroup() { return cGroup; }

		//"global"
		public Keyword getGlobalKeyword_0() { return cGlobalKeyword_0; }

		//variables+=VariableDeclaration
		public Assignment getVariablesAssignment_1() { return cVariablesAssignment_1; }

		//VariableDeclaration
		public RuleCall getVariablesVariableDeclarationParserRuleCall_1_0() { return cVariablesVariableDeclarationParserRuleCall_1_0; }

		//("," variables+=VariableDeclaration)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//variables+=VariableDeclaration
		public Assignment getVariablesAssignment_2_1() { return cVariablesAssignment_2_1; }

		//VariableDeclaration
		public RuleCall getVariablesVariableDeclarationParserRuleCall_2_1_0() { return cVariablesVariableDeclarationParserRuleCall_2_1_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class VariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueExpressionParserRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		
		//VariableDeclaration:
		//	name=ID ("=" value=Expression)?;
		public ParserRule getRule() { return rule; }

		//name=ID ("=" value=Expression)?
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//("=" value=Expression)?
		public Group getGroup_1() { return cGroup_1; }

		//"="
		public Keyword getEqualsSignKeyword_1_0() { return cEqualsSignKeyword_1_0; }

		//value=Expression
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }

		//Expression
		public RuleCall getValueExpressionParserRuleCall_1_1_0() { return cValueExpressionParserRuleCall_1_1_0; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final RuleCall cComparisonParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expression:
		//	Comparison;
		public ParserRule getRule() { return rule; }

		//Comparison
		public RuleCall getComparisonParserRuleCall() { return cComparisonParserRuleCall; }
	}

	public class ComparisonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Comparison");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOrParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cTypedEqualsLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignEqualsSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cEqualsLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Group cGroup_1_0_2 = (Group)cAlternatives_1_0.eContents().get(2);
		private final Action cTypedDifferentLeftAction_1_0_2_0 = (Action)cGroup_1_0_2.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignEqualsSignKeyword_1_0_2_1 = (Keyword)cGroup_1_0_2.eContents().get(1);
		private final Group cGroup_1_0_3 = (Group)cAlternatives_1_0.eContents().get(3);
		private final Action cDifferentLeftAction_1_0_3_0 = (Action)cGroup_1_0_3.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1_0_3_1 = (Keyword)cGroup_1_0_3.eContents().get(1);
		private final Group cGroup_1_0_4 = (Group)cAlternatives_1_0.eContents().get(4);
		private final Action cLessOrEqualsLeftAction_1_0_4_0 = (Action)cGroup_1_0_4.eContents().get(0);
		private final Keyword cLessThanSignEqualsSignKeyword_1_0_4_1 = (Keyword)cGroup_1_0_4.eContents().get(1);
		private final Group cGroup_1_0_5 = (Group)cAlternatives_1_0.eContents().get(5);
		private final Action cLessLeftAction_1_0_5_0 = (Action)cGroup_1_0_5.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1_0_5_1 = (Keyword)cGroup_1_0_5.eContents().get(1);
		private final Group cGroup_1_0_6 = (Group)cAlternatives_1_0.eContents().get(6);
		private final Action cMoreOrEqualsLeftAction_1_0_6_0 = (Action)cGroup_1_0_6.eContents().get(0);
		private final Keyword cGreaterThanSignEqualsSignKeyword_1_0_6_1 = (Keyword)cGroup_1_0_6.eContents().get(1);
		private final Group cGroup_1_0_7 = (Group)cAlternatives_1_0.eContents().get(7);
		private final Action cMoreLeftAction_1_0_7_0 = (Action)cGroup_1_0_7.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_0_7_1 = (Keyword)cGroup_1_0_7.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOrParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Comparison returns Expression:
		//	Or (({TypedEquals.left=current} "===" | {Equals.left=current} "==" | {TypedDifferent.left=current} "!==" |
		//	{Different.left=current} "!=" | {LessOrEquals.left=current} "<=" | {Less.left=current} "<" |
		//	{MoreOrEquals.left=current} ">=" | {More.left=current} ">") right=Or)*;
		public ParserRule getRule() { return rule; }

		//Or (({TypedEquals.left=current} "===" | {Equals.left=current} "==" | {TypedDifferent.left=current} "!==" |
		//{Different.left=current} "!=" | {LessOrEquals.left=current} "<=" | {Less.left=current} "<" |
		//{MoreOrEquals.left=current} ">=" | {More.left=current} ">") right=Or)*
		public Group getGroup() { return cGroup; }

		//Or
		public RuleCall getOrParserRuleCall_0() { return cOrParserRuleCall_0; }

		//(({TypedEquals.left=current} "===" | {Equals.left=current} "==" | {TypedDifferent.left=current} "!==" |
		//{Different.left=current} "!=" | {LessOrEquals.left=current} "<=" | {Less.left=current} "<" |
		//{MoreOrEquals.left=current} ">=" | {More.left=current} ">") right=Or)*
		public Group getGroup_1() { return cGroup_1; }

		//{TypedEquals.left=current} "===" | {Equals.left=current} "==" | {TypedDifferent.left=current} "!==" |
		//{Different.left=current} "!=" | {LessOrEquals.left=current} "<=" | {Less.left=current} "<" |
		//{MoreOrEquals.left=current} ">=" | {More.left=current} ">"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//{TypedEquals.left=current} "==="
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{TypedEquals.left=current}
		public Action getTypedEqualsLeftAction_1_0_0_0() { return cTypedEqualsLeftAction_1_0_0_0; }

		//"==="
		public Keyword getEqualsSignEqualsSignEqualsSignKeyword_1_0_0_1() { return cEqualsSignEqualsSignEqualsSignKeyword_1_0_0_1; }

		//{Equals.left=current} "=="
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//{Equals.left=current}
		public Action getEqualsLeftAction_1_0_1_0() { return cEqualsLeftAction_1_0_1_0; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_1_0_1_1() { return cEqualsSignEqualsSignKeyword_1_0_1_1; }

		//{TypedDifferent.left=current} "!=="
		public Group getGroup_1_0_2() { return cGroup_1_0_2; }

		//{TypedDifferent.left=current}
		public Action getTypedDifferentLeftAction_1_0_2_0() { return cTypedDifferentLeftAction_1_0_2_0; }

		//"!=="
		public Keyword getExclamationMarkEqualsSignEqualsSignKeyword_1_0_2_1() { return cExclamationMarkEqualsSignEqualsSignKeyword_1_0_2_1; }

		//{Different.left=current} "!="
		public Group getGroup_1_0_3() { return cGroup_1_0_3; }

		//{Different.left=current}
		public Action getDifferentLeftAction_1_0_3_0() { return cDifferentLeftAction_1_0_3_0; }

		//"!="
		public Keyword getExclamationMarkEqualsSignKeyword_1_0_3_1() { return cExclamationMarkEqualsSignKeyword_1_0_3_1; }

		//{LessOrEquals.left=current} "<="
		public Group getGroup_1_0_4() { return cGroup_1_0_4; }

		//{LessOrEquals.left=current}
		public Action getLessOrEqualsLeftAction_1_0_4_0() { return cLessOrEqualsLeftAction_1_0_4_0; }

		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_1_0_4_1() { return cLessThanSignEqualsSignKeyword_1_0_4_1; }

		//{Less.left=current} "<"
		public Group getGroup_1_0_5() { return cGroup_1_0_5; }

		//{Less.left=current}
		public Action getLessLeftAction_1_0_5_0() { return cLessLeftAction_1_0_5_0; }

		//"<"
		public Keyword getLessThanSignKeyword_1_0_5_1() { return cLessThanSignKeyword_1_0_5_1; }

		//{MoreOrEquals.left=current} ">="
		public Group getGroup_1_0_6() { return cGroup_1_0_6; }

		//{MoreOrEquals.left=current}
		public Action getMoreOrEqualsLeftAction_1_0_6_0() { return cMoreOrEqualsLeftAction_1_0_6_0; }

		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_1_0_6_1() { return cGreaterThanSignEqualsSignKeyword_1_0_6_1; }

		//{More.left=current} ">"
		public Group getGroup_1_0_7() { return cGroup_1_0_7; }

		//{More.left=current}
		public Action getMoreLeftAction_1_0_7_0() { return cMoreLeftAction_1_0_7_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_1_0_7_1() { return cGreaterThanSignKeyword_1_0_7_1; }

		//right=Or
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//Or
		public RuleCall getRightOrParserRuleCall_1_1_0() { return cRightOrParserRuleCall_1_1_0; }
	}

	public class OrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Or");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cTypedEqualsLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Alternatives cAlternatives_1_0_1 = (Alternatives)cGroup_1_0.eContents().get(1);
		private final Keyword cOrKeyword_1_0_1_0 = (Keyword)cAlternatives_1_0_1.eContents().get(0);
		private final Keyword cVerticalLineVerticalLineKeyword_1_0_1_1 = (Keyword)cAlternatives_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightAndParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Or returns Expression:
		//	And (({TypedEquals.left=current} ("or" | "||")) right=And)*;
		public ParserRule getRule() { return rule; }

		//And (({TypedEquals.left=current} ("or" | "||")) right=And)*
		public Group getGroup() { return cGroup; }

		//And
		public RuleCall getAndParserRuleCall_0() { return cAndParserRuleCall_0; }

		//(({TypedEquals.left=current} ("or" | "||")) right=And)*
		public Group getGroup_1() { return cGroup_1; }

		//{TypedEquals.left=current} ("or" | "||")
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{TypedEquals.left=current}
		public Action getTypedEqualsLeftAction_1_0_0() { return cTypedEqualsLeftAction_1_0_0; }

		//"or" | "||"
		public Alternatives getAlternatives_1_0_1() { return cAlternatives_1_0_1; }

		//"or"
		public Keyword getOrKeyword_1_0_1_0() { return cOrKeyword_1_0_1_0; }

		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_1_0_1_1() { return cVerticalLineVerticalLineKeyword_1_0_1_1; }

		//right=And
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//And
		public RuleCall getRightAndParserRuleCall_1_1_0() { return cRightAndParserRuleCall_1_1_0; }
	}

	public class AndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "And");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAdditionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cTypedEqualsLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Alternatives cAlternatives_1_0_1 = (Alternatives)cGroup_1_0.eContents().get(1);
		private final Keyword cAndKeyword_1_0_1_0 = (Keyword)cAlternatives_1_0_1.eContents().get(0);
		private final Keyword cAmpersandAmpersandKeyword_1_0_1_1 = (Keyword)cAlternatives_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightAdditionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//And returns Expression:
		//	Addition (({TypedEquals.left=current} ("and" | "&&")) right=Addition)*;
		public ParserRule getRule() { return rule; }

		//Addition (({TypedEquals.left=current} ("and" | "&&")) right=Addition)*
		public Group getGroup() { return cGroup; }

		//Addition
		public RuleCall getAdditionParserRuleCall_0() { return cAdditionParserRuleCall_0; }

		//(({TypedEquals.left=current} ("and" | "&&")) right=Addition)*
		public Group getGroup_1() { return cGroup_1; }

		//{TypedEquals.left=current} ("and" | "&&")
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{TypedEquals.left=current}
		public Action getTypedEqualsLeftAction_1_0_0() { return cTypedEqualsLeftAction_1_0_0; }

		//"and" | "&&"
		public Alternatives getAlternatives_1_0_1() { return cAlternatives_1_0_1; }

		//"and"
		public Keyword getAndKeyword_1_0_1_0() { return cAndKeyword_1_0_1_0; }

		//"&&"
		public Keyword getAmpersandAmpersandKeyword_1_0_1_1() { return cAmpersandAmpersandKeyword_1_0_1_1; }

		//right=Addition
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//Addition
		public RuleCall getRightAdditionParserRuleCall_1_1_0() { return cRightAdditionParserRuleCall_1_1_0; }
	}

	public class AdditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Addition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cPlusLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cMinusLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightMultiplicationParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Addition returns Expression:
		//	Multiplication (({Plus.left=current} "+" | {Minus.left=current} "-") right=Multiplication)*;
		public ParserRule getRule() { return rule; }

		//Multiplication (({Plus.left=current} "+" | {Minus.left=current} "-") right=Multiplication)*
		public Group getGroup() { return cGroup; }

		//Multiplication
		public RuleCall getMultiplicationParserRuleCall_0() { return cMultiplicationParserRuleCall_0; }

		//(({Plus.left=current} "+" | {Minus.left=current} "-") right=Multiplication)*
		public Group getGroup_1() { return cGroup_1; }

		//{Plus.left=current} "+" | {Minus.left=current} "-"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//{Plus.left=current} "+"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{Plus.left=current}
		public Action getPlusLeftAction_1_0_0_0() { return cPlusLeftAction_1_0_0_0; }

		//"+"
		public Keyword getPlusSignKeyword_1_0_0_1() { return cPlusSignKeyword_1_0_0_1; }

		//{Minus.left=current} "-"
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//{Minus.left=current}
		public Action getMinusLeftAction_1_0_1_0() { return cMinusLeftAction_1_0_1_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1_0_1_1() { return cHyphenMinusKeyword_1_0_1_1; }

		//right=Multiplication
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//Multiplication
		public RuleCall getRightMultiplicationParserRuleCall_1_1_0() { return cRightMultiplicationParserRuleCall_1_1_0; }
	}

	public class MultiplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Multiplication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cMultiLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cDivLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cSolidusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightPrimaryExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Multiplication returns Expression:
		//	PrimaryExpression (({Multi.left=current} "*" | {Div.left=current} "/") right=PrimaryExpression)*;
		public ParserRule getRule() { return rule; }

		//PrimaryExpression (({Multi.left=current} "*" | {Div.left=current} "/") right=PrimaryExpression)*
		public Group getGroup() { return cGroup; }

		//PrimaryExpression
		public RuleCall getPrimaryExpressionParserRuleCall_0() { return cPrimaryExpressionParserRuleCall_0; }

		//(({Multi.left=current} "*" | {Div.left=current} "/") right=PrimaryExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{Multi.left=current} "*" | {Div.left=current} "/"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//{Multi.left=current} "*"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{Multi.left=current}
		public Action getMultiLeftAction_1_0_0_0() { return cMultiLeftAction_1_0_0_0; }

		//"*"
		public Keyword getAsteriskKeyword_1_0_0_1() { return cAsteriskKeyword_1_0_0_1; }

		//{Div.left=current} "/"
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//{Div.left=current}
		public Action getDivLeftAction_1_0_1_0() { return cDivLeftAction_1_0_1_0; }

		//"/"
		public Keyword getSolidusKeyword_1_0_1_1() { return cSolidusKeyword_1_0_1_1; }

		//right=PrimaryExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//PrimaryExpression
		public RuleCall getRightPrimaryExpressionParserRuleCall_1_1_0() { return cRightPrimaryExpressionParserRuleCall_1_1_0; }
	}

	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cRealLiteralAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueREALTerminalRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cIntLiteralAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		private final RuleCall cFunctionCallParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cVariableReferenceParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cStringLiteralAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Assignment cValueAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_5_1_0 = (RuleCall)cValueAssignment_5_1.eContents().get(0);
		private final RuleCall cArrayLiteralParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//PrimaryExpression returns Expression:
		//	"(" Expression ")" | {RealLiteral} value=REAL | {IntLiteral} value=INT | FunctionCall | VariableReference |
		//	{StringLiteral} value=STRING | ArrayLiteral;
		public ParserRule getRule() { return rule; }

		//"(" Expression ")" | {RealLiteral} value=REAL | {IntLiteral} value=INT | FunctionCall | VariableReference |
		//{StringLiteral} value=STRING | ArrayLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//"(" Expression ")"
		public Group getGroup_0() { return cGroup_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }

		//Expression
		public RuleCall getExpressionParserRuleCall_0_1() { return cExpressionParserRuleCall_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }

		//{RealLiteral} value=REAL
		public Group getGroup_1() { return cGroup_1; }

		//{RealLiteral}
		public Action getRealLiteralAction_1_0() { return cRealLiteralAction_1_0; }

		//value=REAL
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }

		//REAL
		public RuleCall getValueREALTerminalRuleCall_1_1_0() { return cValueREALTerminalRuleCall_1_1_0; }

		//{IntLiteral} value=INT
		public Group getGroup_2() { return cGroup_2; }

		//{IntLiteral}
		public Action getIntLiteralAction_2_0() { return cIntLiteralAction_2_0; }

		//value=INT
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_2_1_0() { return cValueINTTerminalRuleCall_2_1_0; }

		//FunctionCall
		public RuleCall getFunctionCallParserRuleCall_3() { return cFunctionCallParserRuleCall_3; }

		//VariableReference
		public RuleCall getVariableReferenceParserRuleCall_4() { return cVariableReferenceParserRuleCall_4; }

		//{StringLiteral} value=STRING
		public Group getGroup_5() { return cGroup_5; }

		//{StringLiteral}
		public Action getStringLiteralAction_5_0() { return cStringLiteralAction_5_0; }

		//value=STRING
		public Assignment getValueAssignment_5_1() { return cValueAssignment_5_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_5_1_0() { return cValueSTRINGTerminalRuleCall_5_1_0; }

		//ArrayLiteral
		public RuleCall getArrayLiteralParserRuleCall_6() { return cArrayLiteralParserRuleCall_6; }
	}

	public class ArrayLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArrayLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValuesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValuesExpressionParserRuleCall_2_0 = (RuleCall)cValuesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cValuesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValuesExpressionParserRuleCall_3_1_0 = (RuleCall)cValuesAssignment_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ArrayLiteral:
		//	"[" "(" values+=Expression ("," values+=Expression)* "]";
		public ParserRule getRule() { return rule; }

		//"[" "(" values+=Expression ("," values+=Expression)* "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//values+=Expression
		public Assignment getValuesAssignment_2() { return cValuesAssignment_2; }

		//Expression
		public RuleCall getValuesExpressionParserRuleCall_2_0() { return cValuesExpressionParserRuleCall_2_0; }

		//("," values+=Expression)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//values+=Expression
		public Assignment getValuesAssignment_3_1() { return cValuesAssignment_3_1; }

		//Expression
		public RuleCall getValuesExpressionParserRuleCall_3_1_0() { return cValuesExpressionParserRuleCall_3_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}

	public class VariableReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariableAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cVariableVariableDeclarationCrossReference_0_0 = (CrossReference)cVariableAssignment_0.eContents().get(0);
		private final RuleCall cVariableVariableDeclarationIDTerminalRuleCall_0_0_1 = (RuleCall)cVariableVariableDeclarationCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cDimensionsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDimensionsExpressionParserRuleCall_1_1_0 = (RuleCall)cDimensionsAssignment_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//VariableReference:
		//	variable=[VariableDeclaration] ("[" dimensions+=Expression "]")*;
		public ParserRule getRule() { return rule; }

		//variable=[VariableDeclaration] ("[" dimensions+=Expression "]")*
		public Group getGroup() { return cGroup; }

		//variable=[VariableDeclaration]
		public Assignment getVariableAssignment_0() { return cVariableAssignment_0; }

		//[VariableDeclaration]
		public CrossReference getVariableVariableDeclarationCrossReference_0_0() { return cVariableVariableDeclarationCrossReference_0_0; }

		//ID
		public RuleCall getVariableVariableDeclarationIDTerminalRuleCall_0_0_1() { return cVariableVariableDeclarationIDTerminalRuleCall_0_0_1; }

		//("[" dimensions+=Expression "]")*
		public Group getGroup_1() { return cGroup_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }

		//dimensions+=Expression
		public Assignment getDimensionsAssignment_1_1() { return cDimensionsAssignment_1_1; }

		//Expression
		public RuleCall getDimensionsExpressionParserRuleCall_1_1_0() { return cDimensionsExpressionParserRuleCall_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }
	}

	public class FunctionCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFunctionCallAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cFunctionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cFunctionFunctionDeclarationCrossReference_1_0 = (CrossReference)cFunctionAssignment_1.eContents().get(0);
		private final RuleCall cFunctionFunctionDeclarationIDTerminalRuleCall_1_0_1 = (RuleCall)cFunctionFunctionDeclarationCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cArgsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cArgsExpressionParserRuleCall_3_0 = (RuleCall)cArgsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cArgsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cArgsExpressionParserRuleCall_4_1_0 = (RuleCall)cArgsAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//FunctionCall:
		//	{FunctionCall} function=[FunctionDeclaration] "(" args+=Expression ("," args+=Expression)* ")";
		public ParserRule getRule() { return rule; }

		//{FunctionCall} function=[FunctionDeclaration] "(" args+=Expression ("," args+=Expression)* ")"
		public Group getGroup() { return cGroup; }

		//{FunctionCall}
		public Action getFunctionCallAction_0() { return cFunctionCallAction_0; }

		//function=[FunctionDeclaration]
		public Assignment getFunctionAssignment_1() { return cFunctionAssignment_1; }

		//[FunctionDeclaration]
		public CrossReference getFunctionFunctionDeclarationCrossReference_1_0() { return cFunctionFunctionDeclarationCrossReference_1_0; }

		//ID
		public RuleCall getFunctionFunctionDeclarationIDTerminalRuleCall_1_0_1() { return cFunctionFunctionDeclarationIDTerminalRuleCall_1_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//args+=Expression
		public Assignment getArgsAssignment_3() { return cArgsAssignment_3; }

		//Expression
		public RuleCall getArgsExpressionParserRuleCall_3_0() { return cArgsExpressionParserRuleCall_3_0; }

		//("," args+=Expression)*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//args+=Expression
		public Assignment getArgsAssignment_4_1() { return cArgsAssignment_4_1; }

		//Expression
		public RuleCall getArgsExpressionParserRuleCall_4_1_0() { return cArgsExpressionParserRuleCall_4_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class IncludeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Include");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIncludeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cQuotationMarkKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cIDTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cQuotationMarkKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Include:
		//	"include" "(" "\"" ID "\"" ")" ";";
		public ParserRule getRule() { return rule; }

		//"include" "(" "\"" ID "\"" ")" ";"
		public Group getGroup() { return cGroup; }

		//"include"
		public Keyword getIncludeKeyword_0() { return cIncludeKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//"\""
		public Keyword getQuotationMarkKeyword_2() { return cQuotationMarkKeyword_2; }

		//ID
		public RuleCall getIDTerminalRuleCall_3() { return cIDTerminalRuleCall_3; }

		//"\""
		public Keyword getQuotationMarkKeyword_4() { return cQuotationMarkKeyword_4; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//";"
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}
	
	
	private final ScriptElements pScript;
	private final StatementElements pStatement;
	private final StatementBlockElements pStatementBlock;
	private final AffectationElements pAffectation;
	private final IfElements pIf;
	private final WhileElements pWhile;
	private final ForElements pFor;
	private final ForIteratorElements pForIterator;
	private final EachIteratorElements pEachIterator;
	private final VariableIteratorElements pVariableIterator;
	private final FunctionDeclarationElements pFunctionDeclaration;
	private final ParameterDeclarationElements pParameterDeclaration;
	private final LocalDeclarationElements pLocalDeclaration;
	private final GlobalDeclarationElements pGlobalDeclaration;
	private final VariableDeclarationElements pVariableDeclaration;
	private final ExpressionElements pExpression;
	private final ComparisonElements pComparison;
	private final OrElements pOr;
	private final AndElements pAnd;
	private final AdditionElements pAddition;
	private final MultiplicationElements pMultiplication;
	private final PrimaryExpressionElements pPrimaryExpression;
	private final ArrayLiteralElements pArrayLiteral;
	private final VariableReferenceElements pVariableReference;
	private final FunctionCallElements pFunctionCall;
	private final IncludeElements pInclude;
	private final TerminalRule tREAL;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public LeekGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pScript = new ScriptElements();
		this.pStatement = new StatementElements();
		this.pStatementBlock = new StatementBlockElements();
		this.pAffectation = new AffectationElements();
		this.pIf = new IfElements();
		this.pWhile = new WhileElements();
		this.pFor = new ForElements();
		this.pForIterator = new ForIteratorElements();
		this.pEachIterator = new EachIteratorElements();
		this.pVariableIterator = new VariableIteratorElements();
		this.pFunctionDeclaration = new FunctionDeclarationElements();
		this.pParameterDeclaration = new ParameterDeclarationElements();
		this.pLocalDeclaration = new LocalDeclarationElements();
		this.pGlobalDeclaration = new GlobalDeclarationElements();
		this.pVariableDeclaration = new VariableDeclarationElements();
		this.pExpression = new ExpressionElements();
		this.pComparison = new ComparisonElements();
		this.pOr = new OrElements();
		this.pAnd = new AndElements();
		this.pAddition = new AdditionElements();
		this.pMultiplication = new MultiplicationElements();
		this.pPrimaryExpression = new PrimaryExpressionElements();
		this.pArrayLiteral = new ArrayLiteralElements();
		this.pVariableReference = new VariableReferenceElements();
		this.pFunctionCall = new FunctionCallElements();
		this.pInclude = new IncludeElements();
		this.tREAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "REAL");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.processus.ecleek.Leek".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Script:
	//	statements+=Statement*;
	public ScriptElements getScriptAccess() {
		return pScript;
	}
	
	public ParserRule getScriptRule() {
		return getScriptAccess().getRule();
	}

	//Statement:
	//	Include | GlobalDeclaration | LocalDeclaration | FunctionDeclaration | FunctionCall ";" | For | While | If |
	//	Affectation ";" | StatementBlock;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//StatementBlock:
	//	"{" {StatementBlock} statements+=Statement* "}";
	public StatementBlockElements getStatementBlockAccess() {
		return pStatementBlock;
	}
	
	public ParserRule getStatementBlockRule() {
		return getStatementBlockAccess().getRule();
	}

	//Affectation:
	//	variable=VariableReference "=" value=Expression;
	public AffectationElements getAffectationAccess() {
		return pAffectation;
	}
	
	public ParserRule getAffectationRule() {
		return getAffectationAccess().getRule();
	}

	//If:
	//	"if" "(" condition=Expression ")" then=Statement ("else" else=Statement)?;
	public IfElements getIfAccess() {
		return pIf;
	}
	
	public ParserRule getIfRule() {
		return getIfAccess().getRule();
	}

	//While:
	//	"while" "(" condition=Expression ")" statement=Statement;
	public WhileElements getWhileAccess() {
		return pWhile;
	}
	
	public ParserRule getWhileRule() {
		return getWhileAccess().getRule();
	}

	//For:
	//	"for" "(" iterator=ForIterator ")" statement=Statement;
	public ForElements getForAccess() {
		return pFor;
	}
	
	public ParserRule getForRule() {
		return getForAccess().getRule();
	}

	//ForIterator:
	//	EachIterator | VariableIterator;
	public ForIteratorElements getForIteratorAccess() {
		return pForIterator;
	}
	
	public ParserRule getForIteratorRule() {
		return getForIteratorAccess().getRule();
	}

	//EachIterator:
	//	("var" key=VariableDeclaration ":")? "var" value=VariableDeclaration "in" array=Expression;
	public EachIteratorElements getEachIteratorAccess() {
		return pEachIterator;
	}
	
	public ParserRule getEachIteratorRule() {
		return getEachIteratorAccess().getRule();
	}

	//VariableIterator:
	//	initialization=Affectation ";" condition=Expression ";" increment=Expression;
	public VariableIteratorElements getVariableIteratorAccess() {
		return pVariableIterator;
	}
	
	public ParserRule getVariableIteratorRule() {
		return getVariableIteratorAccess().getRule();
	}

	//FunctionDeclaration:
	//	"function" name=ID "(" (parameter+=ParameterDeclaration ("," parameter+=ParameterDeclaration)*)? ")";
	public FunctionDeclarationElements getFunctionDeclarationAccess() {
		return pFunctionDeclaration;
	}
	
	public ParserRule getFunctionDeclarationRule() {
		return getFunctionDeclarationAccess().getRule();
	}

	//ParameterDeclaration:
	//	byAdress?="@" name=ID;
	public ParameterDeclarationElements getParameterDeclarationAccess() {
		return pParameterDeclaration;
	}
	
	public ParserRule getParameterDeclarationRule() {
		return getParameterDeclarationAccess().getRule();
	}

	//LocalDeclaration:
	//	"var" variables+=VariableDeclaration ("," variables+=VariableDeclaration)* ";";
	public LocalDeclarationElements getLocalDeclarationAccess() {
		return pLocalDeclaration;
	}
	
	public ParserRule getLocalDeclarationRule() {
		return getLocalDeclarationAccess().getRule();
	}

	//GlobalDeclaration:
	//	"global" variables+=VariableDeclaration ("," variables+=VariableDeclaration)* ";";
	public GlobalDeclarationElements getGlobalDeclarationAccess() {
		return pGlobalDeclaration;
	}
	
	public ParserRule getGlobalDeclarationRule() {
		return getGlobalDeclarationAccess().getRule();
	}

	//VariableDeclaration:
	//	name=ID ("=" value=Expression)?;
	public VariableDeclarationElements getVariableDeclarationAccess() {
		return pVariableDeclaration;
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}

	//Expression:
	//	Comparison;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//Comparison returns Expression:
	//	Or (({TypedEquals.left=current} "===" | {Equals.left=current} "==" | {TypedDifferent.left=current} "!==" |
	//	{Different.left=current} "!=" | {LessOrEquals.left=current} "<=" | {Less.left=current} "<" |
	//	{MoreOrEquals.left=current} ">=" | {More.left=current} ">") right=Or)*;
	public ComparisonElements getComparisonAccess() {
		return pComparison;
	}
	
	public ParserRule getComparisonRule() {
		return getComparisonAccess().getRule();
	}

	//Or returns Expression:
	//	And (({TypedEquals.left=current} ("or" | "||")) right=And)*;
	public OrElements getOrAccess() {
		return pOr;
	}
	
	public ParserRule getOrRule() {
		return getOrAccess().getRule();
	}

	//And returns Expression:
	//	Addition (({TypedEquals.left=current} ("and" | "&&")) right=Addition)*;
	public AndElements getAndAccess() {
		return pAnd;
	}
	
	public ParserRule getAndRule() {
		return getAndAccess().getRule();
	}

	//Addition returns Expression:
	//	Multiplication (({Plus.left=current} "+" | {Minus.left=current} "-") right=Multiplication)*;
	public AdditionElements getAdditionAccess() {
		return pAddition;
	}
	
	public ParserRule getAdditionRule() {
		return getAdditionAccess().getRule();
	}

	//Multiplication returns Expression:
	//	PrimaryExpression (({Multi.left=current} "*" | {Div.left=current} "/") right=PrimaryExpression)*;
	public MultiplicationElements getMultiplicationAccess() {
		return pMultiplication;
	}
	
	public ParserRule getMultiplicationRule() {
		return getMultiplicationAccess().getRule();
	}

	//PrimaryExpression returns Expression:
	//	"(" Expression ")" | {RealLiteral} value=REAL | {IntLiteral} value=INT | FunctionCall | VariableReference |
	//	{StringLiteral} value=STRING | ArrayLiteral;
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return pPrimaryExpression;
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}

	//ArrayLiteral:
	//	"[" "(" values+=Expression ("," values+=Expression)* "]";
	public ArrayLiteralElements getArrayLiteralAccess() {
		return pArrayLiteral;
	}
	
	public ParserRule getArrayLiteralRule() {
		return getArrayLiteralAccess().getRule();
	}

	//VariableReference:
	//	variable=[VariableDeclaration] ("[" dimensions+=Expression "]")*;
	public VariableReferenceElements getVariableReferenceAccess() {
		return pVariableReference;
	}
	
	public ParserRule getVariableReferenceRule() {
		return getVariableReferenceAccess().getRule();
	}

	//FunctionCall:
	//	{FunctionCall} function=[FunctionDeclaration] "(" args+=Expression ("," args+=Expression)* ")";
	public FunctionCallElements getFunctionCallAccess() {
		return pFunctionCall;
	}
	
	public ParserRule getFunctionCallRule() {
		return getFunctionCallAccess().getRule();
	}

	//Include:
	//	"include" "(" "\"" ID "\"" ")" ";";
	public IncludeElements getIncludeAccess() {
		return pInclude;
	}
	
	public ParserRule getIncludeRule() {
		return getIncludeAccess().getRule();
	}

	//terminal REAL returns ecore::EDouble:
	//	"0".."9"* "." "0".."9"+;
	public TerminalRule getREALRule() {
		return tREAL;
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
