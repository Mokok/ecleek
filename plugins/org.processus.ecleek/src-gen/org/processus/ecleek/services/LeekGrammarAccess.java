/*
* generated by Xtext
*/
package org.processus.ecleek.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class LeekGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ScriptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Script");
		private final Assignment cStatementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cStatementsStatementParserRuleCall_0 = (RuleCall)cStatementsAssignment.eContents().get(0);
		
		//Script:
		//	statements+=Statement*;
		public ParserRule getRule() { return rule; }

		//statements+=Statement*
		public Assignment getStatementsAssignment() { return cStatementsAssignment; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_0() { return cStatementsStatementParserRuleCall_0; }
	}

	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cIncludeParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cGlobalDeclarationParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cFunctionDeclarationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final RuleCall cLocalDeclarationParserRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final RuleCall cFunctionCallParserRuleCall_4_0 = (RuleCall)cGroup_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final RuleCall cIterationParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cIfParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final RuleCall cAffectationParserRuleCall_7_0 = (RuleCall)cGroup_7.eContents().get(0);
		private final Keyword cSemicolonKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final RuleCall cStatementBlockParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final RuleCall cReturnStatementParserRuleCall_9_0 = (RuleCall)cGroup_9.eContents().get(0);
		private final Keyword cSemicolonKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		private final Group cGroup_10 = (Group)cAlternatives.eContents().get(10);
		private final RuleCall cBreakStatementParserRuleCall_10_0 = (RuleCall)cGroup_10.eContents().get(0);
		private final Keyword cSemicolonKeyword_10_1 = (Keyword)cGroup_10.eContents().get(1);
		private final Group cGroup_11 = (Group)cAlternatives.eContents().get(11);
		private final RuleCall cContinueStatementParserRuleCall_11_0 = (RuleCall)cGroup_11.eContents().get(0);
		private final Keyword cSemicolonKeyword_11_1 = (Keyword)cGroup_11.eContents().get(1);
		private final Group cGroup_12 = (Group)cAlternatives.eContents().get(12);
		private final Action cEmptyStatementAction_12_0 = (Action)cGroup_12.eContents().get(0);
		private final Keyword cSemicolonKeyword_12_1 = (Keyword)cGroup_12.eContents().get(1);
		
		//Statement:
		//	Include ";" //	| Postfix ';'
		//	| GlobalDeclaration ";" | FunctionDeclaration | LocalDeclaration ";" | FunctionCall ";" | Iteration | If | Affectation
		//	";" | StatementBlock | ReturnStatement ";" | BreakStatement ";" | ContinueStatement ";" | {EmptyStatement} ";";
		public ParserRule getRule() { return rule; }

		//Include ";" //	| Postfix ';'
		//| GlobalDeclaration ";" | FunctionDeclaration | LocalDeclaration ";" | FunctionCall ";" | Iteration | If | Affectation
		//";" | StatementBlock | ReturnStatement ";" | BreakStatement ";" | ContinueStatement ";" | {EmptyStatement} ";"
		public Alternatives getAlternatives() { return cAlternatives; }

		//Include ";"
		public Group getGroup_0() { return cGroup_0; }

		//Include
		public RuleCall getIncludeParserRuleCall_0_0() { return cIncludeParserRuleCall_0_0; }

		//";"
		public Keyword getSemicolonKeyword_0_1() { return cSemicolonKeyword_0_1; }

		//GlobalDeclaration ";"
		public Group getGroup_1() { return cGroup_1; }

		//GlobalDeclaration
		public RuleCall getGlobalDeclarationParserRuleCall_1_0() { return cGlobalDeclarationParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }

		//FunctionDeclaration
		public RuleCall getFunctionDeclarationParserRuleCall_2() { return cFunctionDeclarationParserRuleCall_2; }

		//LocalDeclaration ";"
		public Group getGroup_3() { return cGroup_3; }

		//LocalDeclaration
		public RuleCall getLocalDeclarationParserRuleCall_3_0() { return cLocalDeclarationParserRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }

		//FunctionCall ";"
		public Group getGroup_4() { return cGroup_4; }

		//FunctionCall
		public RuleCall getFunctionCallParserRuleCall_4_0() { return cFunctionCallParserRuleCall_4_0; }

		//";"
		public Keyword getSemicolonKeyword_4_1() { return cSemicolonKeyword_4_1; }

		//Iteration
		public RuleCall getIterationParserRuleCall_5() { return cIterationParserRuleCall_5; }

		//If
		public RuleCall getIfParserRuleCall_6() { return cIfParserRuleCall_6; }

		//Affectation ";"
		public Group getGroup_7() { return cGroup_7; }

		//Affectation
		public RuleCall getAffectationParserRuleCall_7_0() { return cAffectationParserRuleCall_7_0; }

		//";"
		public Keyword getSemicolonKeyword_7_1() { return cSemicolonKeyword_7_1; }

		//StatementBlock
		public RuleCall getStatementBlockParserRuleCall_8() { return cStatementBlockParserRuleCall_8; }

		//ReturnStatement ";"
		public Group getGroup_9() { return cGroup_9; }

		//ReturnStatement
		public RuleCall getReturnStatementParserRuleCall_9_0() { return cReturnStatementParserRuleCall_9_0; }

		//";"
		public Keyword getSemicolonKeyword_9_1() { return cSemicolonKeyword_9_1; }

		//BreakStatement ";"
		public Group getGroup_10() { return cGroup_10; }

		//BreakStatement
		public RuleCall getBreakStatementParserRuleCall_10_0() { return cBreakStatementParserRuleCall_10_0; }

		//";"
		public Keyword getSemicolonKeyword_10_1() { return cSemicolonKeyword_10_1; }

		//ContinueStatement ";"
		public Group getGroup_11() { return cGroup_11; }

		//ContinueStatement
		public RuleCall getContinueStatementParserRuleCall_11_0() { return cContinueStatementParserRuleCall_11_0; }

		//";"
		public Keyword getSemicolonKeyword_11_1() { return cSemicolonKeyword_11_1; }

		//{EmptyStatement} ";"
		public Group getGroup_12() { return cGroup_12; }

		//{EmptyStatement}
		public Action getEmptyStatementAction_12_0() { return cEmptyStatementAction_12_0; }

		//";"
		public Keyword getSemicolonKeyword_12_1() { return cSemicolonKeyword_12_1; }
	}

	public class BreakStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BreakStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBreakStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBreakKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//BreakStatement:
		//	{BreakStatement} "break";
		public ParserRule getRule() { return rule; }

		//{BreakStatement} "break"
		public Group getGroup() { return cGroup; }

		//{BreakStatement}
		public Action getBreakStatementAction_0() { return cBreakStatementAction_0; }

		//"break"
		public Keyword getBreakKeyword_1() { return cBreakKeyword_1; }
	}

	public class ContinueStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ContinueStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cContinueStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cContinueKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ContinueStatement:
		//	{ContinueStatement} "continue";
		public ParserRule getRule() { return rule; }

		//{ContinueStatement} "continue"
		public Group getGroup() { return cGroup; }

		//{ContinueStatement}
		public Action getContinueStatementAction_0() { return cContinueStatementAction_0; }

		//"continue"
		public Keyword getContinueKeyword_1() { return cContinueKeyword_1; }
	}

	public class StatementBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StatementBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cStatementBlockAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cStatementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementsStatementParserRuleCall_2_0 = (RuleCall)cStatementsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//StatementBlock:
		//	"{" {StatementBlock} statements+=Statement* "}";
		public ParserRule getRule() { return rule; }

		//"{" {StatementBlock} statements+=Statement* "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//{StatementBlock}
		public Action getStatementBlockAction_1() { return cStatementBlockAction_1; }

		//statements+=Statement*
		public Assignment getStatementsAssignment_2() { return cStatementsAssignment_2; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_2_0() { return cStatementsStatementParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class AffectationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Affectation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariableAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVariableVariableReferenceParserRuleCall_0_0 = (RuleCall)cVariableAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueExpressionParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Affectation:
		//	variable=VariableReference "=" value=Expression;
		public ParserRule getRule() { return rule; }

		//variable=VariableReference "=" value=Expression
		public Group getGroup() { return cGroup; }

		//variable=VariableReference
		public Assignment getVariableAssignment_0() { return cVariableAssignment_0; }

		//VariableReference
		public RuleCall getVariableVariableReferenceParserRuleCall_0_0() { return cVariableVariableReferenceParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value=Expression
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//Expression
		public RuleCall getValueExpressionParserRuleCall_2_0() { return cValueExpressionParserRuleCall_2_0; }
	}

	public class IfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "If");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionExpressionParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cThenAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cThenStatementParserRuleCall_4_0 = (RuleCall)cThenAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cElseKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cElseAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cElseStatementParserRuleCall_5_1_0 = (RuleCall)cElseAssignment_5_1.eContents().get(0);
		
		//If:
		//	"if" "(" condition=Expression ")" then=Statement ("else" else=Statement)?;
		public ParserRule getRule() { return rule; }

		//"if" "(" condition=Expression ")" then=Statement ("else" else=Statement)?
		public Group getGroup() { return cGroup; }

		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//condition=Expression
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }

		//Expression
		public RuleCall getConditionExpressionParserRuleCall_2_0() { return cConditionExpressionParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//then=Statement
		public Assignment getThenAssignment_4() { return cThenAssignment_4; }

		//Statement
		public RuleCall getThenStatementParserRuleCall_4_0() { return cThenStatementParserRuleCall_4_0; }

		//(=> "else" else=Statement)?
		public Group getGroup_5() { return cGroup_5; }

		//=> "else"
		public Keyword getElseKeyword_5_0() { return cElseKeyword_5_0; }

		//else=Statement
		public Assignment getElseAssignment_5_1() { return cElseAssignment_5_1; }

		//Statement
		public RuleCall getElseStatementParserRuleCall_5_1_0() { return cElseStatementParserRuleCall_5_1_0; }
	}

	public class IterationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Iteration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cWhileParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cForInParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cForParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Iteration:
		//	While | ForIn | For;
		public ParserRule getRule() { return rule; }

		//While | ForIn | For
		public Alternatives getAlternatives() { return cAlternatives; }

		//While
		public RuleCall getWhileParserRuleCall_0() { return cWhileParserRuleCall_0; }

		//ForIn
		public RuleCall getForInParserRuleCall_1() { return cForInParserRuleCall_1; }

		//For
		public RuleCall getForParserRuleCall_2() { return cForParserRuleCall_2; }
	}

	public class WhileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "While");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionExpressionParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cStatementAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStatementStatementParserRuleCall_4_0 = (RuleCall)cStatementAssignment_4.eContents().get(0);
		
		//While:
		//	"while" "(" condition=Expression ")" statement=Statement;
		public ParserRule getRule() { return rule; }

		//"while" "(" condition=Expression ")" statement=Statement
		public Group getGroup() { return cGroup; }

		//"while"
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//condition=Expression
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }

		//Expression
		public RuleCall getConditionExpressionParserRuleCall_2_0() { return cConditionExpressionParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//statement=Statement
		public Assignment getStatementAssignment_4() { return cStatementAssignment_4; }

		//Statement
		public RuleCall getStatementStatementParserRuleCall_4_0() { return cStatementStatementParserRuleCall_4_0; }
	}

	public class ForElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "For");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInitializerAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInitializerForInitializerParserRuleCall_2_0 = (RuleCall)cInitializerAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cConditionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConditionExpressionParserRuleCall_4_0 = (RuleCall)cConditionAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cIncrementAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cIncrementExpressionParserRuleCall_6_0 = (RuleCall)cIncrementAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cStatementAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cStatementStatementParserRuleCall_8_0 = (RuleCall)cStatementAssignment_8.eContents().get(0);
		
		//For:
		//	"for" "(" initializer=ForInitializer ";" condition=Expression ";" increment=Expression ")" statement=Statement;
		public ParserRule getRule() { return rule; }

		//"for" "(" initializer=ForInitializer ";" condition=Expression ";" increment=Expression ")" statement=Statement
		public Group getGroup() { return cGroup; }

		//"for"
		public Keyword getForKeyword_0() { return cForKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//initializer=ForInitializer
		public Assignment getInitializerAssignment_2() { return cInitializerAssignment_2; }

		//ForInitializer
		public RuleCall getInitializerForInitializerParserRuleCall_2_0() { return cInitializerForInitializerParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }

		//condition=Expression
		public Assignment getConditionAssignment_4() { return cConditionAssignment_4; }

		//Expression
		public RuleCall getConditionExpressionParserRuleCall_4_0() { return cConditionExpressionParserRuleCall_4_0; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }

		//increment=Expression
		public Assignment getIncrementAssignment_6() { return cIncrementAssignment_6; }

		//Expression
		public RuleCall getIncrementExpressionParserRuleCall_6_0() { return cIncrementExpressionParserRuleCall_6_0; }

		//")"
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }

		//statement=Statement
		public Assignment getStatementAssignment_8() { return cStatementAssignment_8; }

		//Statement
		public RuleCall getStatementStatementParserRuleCall_8_0() { return cStatementStatementParserRuleCall_8_0; }
	}

	public class ForInElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ForIn");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cKeyAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cKeyForInVariableReferenceParserRuleCall_2_0_0 = (RuleCall)cKeyAssignment_2_0.eContents().get(0);
		private final Keyword cColonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueForInVariableReferenceParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Keyword cInKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cArrayAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cArrayExpressionParserRuleCall_5_0 = (RuleCall)cArrayAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cStatementAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cStatementStatementParserRuleCall_7_0 = (RuleCall)cStatementAssignment_7.eContents().get(0);
		
		//ForIn:
		//	"for" "(" (key=ForInVariableReference ":")? value=ForInVariableReference "in" array=Expression ")"
		//	statement=Statement;
		public ParserRule getRule() { return rule; }

		//"for" "(" (key=ForInVariableReference ":")? value=ForInVariableReference "in" array=Expression ")" statement=Statement
		public Group getGroup() { return cGroup; }

		//"for"
		public Keyword getForKeyword_0() { return cForKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//(key=ForInVariableReference ":")?
		public Group getGroup_2() { return cGroup_2; }

		//key=ForInVariableReference
		public Assignment getKeyAssignment_2_0() { return cKeyAssignment_2_0; }

		//ForInVariableReference
		public RuleCall getKeyForInVariableReferenceParserRuleCall_2_0_0() { return cKeyForInVariableReferenceParserRuleCall_2_0_0; }

		//":"
		public Keyword getColonKeyword_2_1() { return cColonKeyword_2_1; }

		//value=ForInVariableReference
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//ForInVariableReference
		public RuleCall getValueForInVariableReferenceParserRuleCall_3_0() { return cValueForInVariableReferenceParserRuleCall_3_0; }

		//"in"
		public Keyword getInKeyword_4() { return cInKeyword_4; }

		//array=Expression
		public Assignment getArrayAssignment_5() { return cArrayAssignment_5; }

		//Expression
		public RuleCall getArrayExpressionParserRuleCall_5_0() { return cArrayExpressionParserRuleCall_5_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }

		//statement=Statement
		public Assignment getStatementAssignment_7() { return cStatementAssignment_7; }

		//Statement
		public RuleCall getStatementStatementParserRuleCall_7_0() { return cStatementStatementParserRuleCall_7_0; }
	}

	public class ForInVariableReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ForInVariableReference");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cVarKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final CrossReference cVariableVariableReferenceCrossReference_1_0 = (CrossReference)cVariableAssignment_1.eContents().get(0);
		private final RuleCall cVariableVariableReferenceIDTerminalRuleCall_1_0_1 = (RuleCall)cVariableVariableReferenceCrossReference_1_0.eContents().get(1);
		
		//ForInVariableReference returns VariableReference:
		//	"var" name=ID | variable=[VariableReference];
		public ParserRule getRule() { return rule; }

		//"var" name=ID | variable=[VariableReference]
		public Alternatives getAlternatives() { return cAlternatives; }

		//"var" name=ID
		public Group getGroup_0() { return cGroup_0; }

		//"var"
		public Keyword getVarKeyword_0_0() { return cVarKeyword_0_0; }

		//name=ID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_0() { return cNameIDTerminalRuleCall_0_1_0; }

		//variable=[VariableReference]
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }

		//[VariableReference]
		public CrossReference getVariableVariableReferenceCrossReference_1_0() { return cVariableVariableReferenceCrossReference_1_0; }

		//ID
		public RuleCall getVariableVariableReferenceIDTerminalRuleCall_1_0_1() { return cVariableVariableReferenceIDTerminalRuleCall_1_0_1; }
	}

	public class ForInitializerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ForInitializer");
		private final RuleCall cVariableReferenceParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ForInitializer:
		//	VariableReference;
		public ParserRule getRule() { return rule; }

		//VariableReference
		public RuleCall getVariableReferenceParserRuleCall() { return cVariableReferenceParserRuleCall; }
	}

	public class FunctionDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunctionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParametersAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParametersParameterDeclarationParserRuleCall_3_0_0 = (RuleCall)cParametersAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParametersAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParametersParameterDeclarationParserRuleCall_3_1_1_0 = (RuleCall)cParametersAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cBodyAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cBodyStatementBlockParserRuleCall_5_0 = (RuleCall)cBodyAssignment_5.eContents().get(0);
		
		//FunctionDeclaration:
		//	"function" name=ID "(" (parameters+=ParameterDeclaration ("," parameters+=ParameterDeclaration)*)? ")"
		//	body=StatementBlock;
		public ParserRule getRule() { return rule; }

		//"function" name=ID "(" (parameters+=ParameterDeclaration ("," parameters+=ParameterDeclaration)*)? ")"
		//body=StatementBlock
		public Group getGroup() { return cGroup; }

		//"function"
		public Keyword getFunctionKeyword_0() { return cFunctionKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(parameters+=ParameterDeclaration ("," parameters+=ParameterDeclaration)*)?
		public Group getGroup_3() { return cGroup_3; }

		//parameters+=ParameterDeclaration
		public Assignment getParametersAssignment_3_0() { return cParametersAssignment_3_0; }

		//ParameterDeclaration
		public RuleCall getParametersParameterDeclarationParserRuleCall_3_0_0() { return cParametersParameterDeclarationParserRuleCall_3_0_0; }

		//("," parameters+=ParameterDeclaration)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//parameters+=ParameterDeclaration
		public Assignment getParametersAssignment_3_1_1() { return cParametersAssignment_3_1_1; }

		//ParameterDeclaration
		public RuleCall getParametersParameterDeclarationParserRuleCall_3_1_1_0() { return cParametersParameterDeclarationParserRuleCall_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//body=StatementBlock
		public Assignment getBodyAssignment_5() { return cBodyAssignment_5; }

		//StatementBlock
		public RuleCall getBodyStatementBlockParserRuleCall_5_0() { return cBodyStatementBlockParserRuleCall_5_0; }
	}

	public class ParameterDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cByAdressAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cByAdressCommercialAtKeyword_0_0 = (Keyword)cByAdressAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//ParameterDeclaration returns VariableReferenceable:
		//	byAdress?="@"? name=ID;
		public ParserRule getRule() { return rule; }

		//byAdress?="@"? name=ID
		public Group getGroup() { return cGroup; }

		//byAdress?="@"?
		public Assignment getByAdressAssignment_0() { return cByAdressAssignment_0; }

		//"@"
		public Keyword getByAdressCommercialAtKeyword_0_0() { return cByAdressCommercialAtKeyword_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class LocalDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LocalDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVariablesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariablesVariableDeclarationParserRuleCall_1_0 = (RuleCall)cVariablesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cVariablesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cVariablesVariableDeclarationParserRuleCall_2_1_0 = (RuleCall)cVariablesAssignment_2_1.eContents().get(0);
		
		//LocalDeclaration:
		//	"var" variables+=VariableDeclaration ("," variables+=VariableDeclaration)*;
		public ParserRule getRule() { return rule; }

		//"var" variables+=VariableDeclaration ("," variables+=VariableDeclaration)*
		public Group getGroup() { return cGroup; }

		//"var"
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }

		//variables+=VariableDeclaration
		public Assignment getVariablesAssignment_1() { return cVariablesAssignment_1; }

		//VariableDeclaration
		public RuleCall getVariablesVariableDeclarationParserRuleCall_1_0() { return cVariablesVariableDeclarationParserRuleCall_1_0; }

		//("," variables+=VariableDeclaration)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//variables+=VariableDeclaration
		public Assignment getVariablesAssignment_2_1() { return cVariablesAssignment_2_1; }

		//VariableDeclaration
		public RuleCall getVariablesVariableDeclarationParserRuleCall_2_1_0() { return cVariablesVariableDeclarationParserRuleCall_2_1_0; }
	}

	public class GlobalDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GlobalDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGlobalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVariablesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariablesVariableDeclarationParserRuleCall_1_0 = (RuleCall)cVariablesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cVariablesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cVariablesVariableDeclarationParserRuleCall_2_1_0 = (RuleCall)cVariablesAssignment_2_1.eContents().get(0);
		
		//GlobalDeclaration:
		//	"global" variables+=VariableDeclaration ("," variables+=VariableDeclaration)*;
		public ParserRule getRule() { return rule; }

		//"global" variables+=VariableDeclaration ("," variables+=VariableDeclaration)*
		public Group getGroup() { return cGroup; }

		//"global"
		public Keyword getGlobalKeyword_0() { return cGlobalKeyword_0; }

		//variables+=VariableDeclaration
		public Assignment getVariablesAssignment_1() { return cVariablesAssignment_1; }

		//VariableDeclaration
		public RuleCall getVariablesVariableDeclarationParserRuleCall_1_0() { return cVariablesVariableDeclarationParserRuleCall_1_0; }

		//("," variables+=VariableDeclaration)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//variables+=VariableDeclaration
		public Assignment getVariablesAssignment_2_1() { return cVariablesAssignment_2_1; }

		//VariableDeclaration
		public RuleCall getVariablesVariableDeclarationParserRuleCall_2_1_0() { return cVariablesVariableDeclarationParserRuleCall_2_1_0; }
	}

	public class VariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueExpressionParserRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		
		//VariableDeclaration:
		//	name=ID ("=" value=Expression)?;
		public ParserRule getRule() { return rule; }

		//name=ID ("=" value=Expression)?
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//("=" value=Expression)?
		public Group getGroup_1() { return cGroup_1; }

		//"="
		public Keyword getEqualsSignKeyword_1_0() { return cEqualsSignKeyword_1_0; }

		//value=Expression
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }

		//Expression
		public RuleCall getValueExpressionParserRuleCall_1_1_0() { return cValueExpressionParserRuleCall_1_1_0; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final RuleCall cComparisonParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expression:
		//	Comparison;
		public ParserRule getRule() { return rule; }

		//Comparison
		public RuleCall getComparisonParserRuleCall() { return cComparisonParserRuleCall; }
	}

	public class ComparisonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Comparison");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOrParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cComparisonLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignEqualsSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cEqualsLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Group cGroup_1_0_2 = (Group)cAlternatives_1_0.eContents().get(2);
		private final Action cTypedDifferentLeftAction_1_0_2_0 = (Action)cGroup_1_0_2.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignEqualsSignKeyword_1_0_2_1 = (Keyword)cGroup_1_0_2.eContents().get(1);
		private final Group cGroup_1_0_3 = (Group)cAlternatives_1_0.eContents().get(3);
		private final Action cDifferentLeftAction_1_0_3_0 = (Action)cGroup_1_0_3.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1_0_3_1 = (Keyword)cGroup_1_0_3.eContents().get(1);
		private final Group cGroup_1_0_4 = (Group)cAlternatives_1_0.eContents().get(4);
		private final Action cLessOrEqualsLeftAction_1_0_4_0 = (Action)cGroup_1_0_4.eContents().get(0);
		private final Keyword cLessThanSignEqualsSignKeyword_1_0_4_1 = (Keyword)cGroup_1_0_4.eContents().get(1);
		private final Group cGroup_1_0_5 = (Group)cAlternatives_1_0.eContents().get(5);
		private final Action cLessLeftAction_1_0_5_0 = (Action)cGroup_1_0_5.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1_0_5_1 = (Keyword)cGroup_1_0_5.eContents().get(1);
		private final Group cGroup_1_0_6 = (Group)cAlternatives_1_0.eContents().get(6);
		private final Action cMoreOrEqualsLeftAction_1_0_6_0 = (Action)cGroup_1_0_6.eContents().get(0);
		private final Keyword cGreaterThanSignEqualsSignKeyword_1_0_6_1 = (Keyword)cGroup_1_0_6.eContents().get(1);
		private final Group cGroup_1_0_7 = (Group)cAlternatives_1_0.eContents().get(7);
		private final Action cMoreLeftAction_1_0_7_0 = (Action)cGroup_1_0_7.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_0_7_1 = (Keyword)cGroup_1_0_7.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOrParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Comparison returns Expression:
		//	Or (({Comparison.left=current} "===" | {Equals.left=current} "==" | {TypedDifferent.left=current} "!==" |
		//	{Different.left=current} "!=" | {LessOrEquals.left=current} "<=" | {Less.left=current} "<" |
		//	{MoreOrEquals.left=current} ">=" | {More.left=current} ">") right=Or)*;
		public ParserRule getRule() { return rule; }

		//Or (({Comparison.left=current} "===" | {Equals.left=current} "==" | {TypedDifferent.left=current} "!==" |
		//{Different.left=current} "!=" | {LessOrEquals.left=current} "<=" | {Less.left=current} "<" |
		//{MoreOrEquals.left=current} ">=" | {More.left=current} ">") right=Or)*
		public Group getGroup() { return cGroup; }

		//Or
		public RuleCall getOrParserRuleCall_0() { return cOrParserRuleCall_0; }

		//(({Comparison.left=current} "===" | {Equals.left=current} "==" | {TypedDifferent.left=current} "!==" |
		//{Different.left=current} "!=" | {LessOrEquals.left=current} "<=" | {Less.left=current} "<" |
		//{MoreOrEquals.left=current} ">=" | {More.left=current} ">") right=Or)*
		public Group getGroup_1() { return cGroup_1; }

		//{Comparison.left=current} "===" | {Equals.left=current} "==" | {TypedDifferent.left=current} "!==" |
		//{Different.left=current} "!=" | {LessOrEquals.left=current} "<=" | {Less.left=current} "<" |
		//{MoreOrEquals.left=current} ">=" | {More.left=current} ">"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//{Comparison.left=current} "==="
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{Comparison.left=current}
		public Action getComparisonLeftAction_1_0_0_0() { return cComparisonLeftAction_1_0_0_0; }

		//"==="
		public Keyword getEqualsSignEqualsSignEqualsSignKeyword_1_0_0_1() { return cEqualsSignEqualsSignEqualsSignKeyword_1_0_0_1; }

		//{Equals.left=current} "=="
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//{Equals.left=current}
		public Action getEqualsLeftAction_1_0_1_0() { return cEqualsLeftAction_1_0_1_0; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_1_0_1_1() { return cEqualsSignEqualsSignKeyword_1_0_1_1; }

		//{TypedDifferent.left=current} "!=="
		public Group getGroup_1_0_2() { return cGroup_1_0_2; }

		//{TypedDifferent.left=current}
		public Action getTypedDifferentLeftAction_1_0_2_0() { return cTypedDifferentLeftAction_1_0_2_0; }

		//"!=="
		public Keyword getExclamationMarkEqualsSignEqualsSignKeyword_1_0_2_1() { return cExclamationMarkEqualsSignEqualsSignKeyword_1_0_2_1; }

		//{Different.left=current} "!="
		public Group getGroup_1_0_3() { return cGroup_1_0_3; }

		//{Different.left=current}
		public Action getDifferentLeftAction_1_0_3_0() { return cDifferentLeftAction_1_0_3_0; }

		//"!="
		public Keyword getExclamationMarkEqualsSignKeyword_1_0_3_1() { return cExclamationMarkEqualsSignKeyword_1_0_3_1; }

		//{LessOrEquals.left=current} "<="
		public Group getGroup_1_0_4() { return cGroup_1_0_4; }

		//{LessOrEquals.left=current}
		public Action getLessOrEqualsLeftAction_1_0_4_0() { return cLessOrEqualsLeftAction_1_0_4_0; }

		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_1_0_4_1() { return cLessThanSignEqualsSignKeyword_1_0_4_1; }

		//{Less.left=current} "<"
		public Group getGroup_1_0_5() { return cGroup_1_0_5; }

		//{Less.left=current}
		public Action getLessLeftAction_1_0_5_0() { return cLessLeftAction_1_0_5_0; }

		//"<"
		public Keyword getLessThanSignKeyword_1_0_5_1() { return cLessThanSignKeyword_1_0_5_1; }

		//{MoreOrEquals.left=current} ">="
		public Group getGroup_1_0_6() { return cGroup_1_0_6; }

		//{MoreOrEquals.left=current}
		public Action getMoreOrEqualsLeftAction_1_0_6_0() { return cMoreOrEqualsLeftAction_1_0_6_0; }

		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_1_0_6_1() { return cGreaterThanSignEqualsSignKeyword_1_0_6_1; }

		//{More.left=current} ">"
		public Group getGroup_1_0_7() { return cGroup_1_0_7; }

		//{More.left=current}
		public Action getMoreLeftAction_1_0_7_0() { return cMoreLeftAction_1_0_7_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_1_0_7_1() { return cGreaterThanSignKeyword_1_0_7_1; }

		//right=Or
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//Or
		public RuleCall getRightOrParserRuleCall_1_1_0() { return cRightOrParserRuleCall_1_1_0; }
	}

	public class OrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Or");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cOrLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Alternatives cAlternatives_1_0_1 = (Alternatives)cGroup_1_0.eContents().get(1);
		private final Keyword cOrKeyword_1_0_1_0 = (Keyword)cAlternatives_1_0_1.eContents().get(0);
		private final Keyword cVerticalLineVerticalLineKeyword_1_0_1_1 = (Keyword)cAlternatives_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightAndParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Or returns Expression:
		//	And (({Or.left=current} ("or" | "||")) right=And)*;
		public ParserRule getRule() { return rule; }

		//And (({Or.left=current} ("or" | "||")) right=And)*
		public Group getGroup() { return cGroup; }

		//And
		public RuleCall getAndParserRuleCall_0() { return cAndParserRuleCall_0; }

		//(({Or.left=current} ("or" | "||")) right=And)*
		public Group getGroup_1() { return cGroup_1; }

		//{Or.left=current} ("or" | "||")
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{Or.left=current}
		public Action getOrLeftAction_1_0_0() { return cOrLeftAction_1_0_0; }

		//"or" | "||"
		public Alternatives getAlternatives_1_0_1() { return cAlternatives_1_0_1; }

		//"or"
		public Keyword getOrKeyword_1_0_1_0() { return cOrKeyword_1_0_1_0; }

		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_1_0_1_1() { return cVerticalLineVerticalLineKeyword_1_0_1_1; }

		//right=And
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//And
		public RuleCall getRightAndParserRuleCall_1_1_0() { return cRightAndParserRuleCall_1_1_0; }
	}

	public class AndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "And");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAdditionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cAndLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Alternatives cAlternatives_1_0_1 = (Alternatives)cGroup_1_0.eContents().get(1);
		private final Keyword cAndKeyword_1_0_1_0 = (Keyword)cAlternatives_1_0_1.eContents().get(0);
		private final Keyword cAmpersandAmpersandKeyword_1_0_1_1 = (Keyword)cAlternatives_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightAdditionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//And returns Expression:
		//	Addition (({And.left=current} ("and" | "&&")) right=Addition)*;
		public ParserRule getRule() { return rule; }

		//Addition (({And.left=current} ("and" | "&&")) right=Addition)*
		public Group getGroup() { return cGroup; }

		//Addition
		public RuleCall getAdditionParserRuleCall_0() { return cAdditionParserRuleCall_0; }

		//(({And.left=current} ("and" | "&&")) right=Addition)*
		public Group getGroup_1() { return cGroup_1; }

		//{And.left=current} ("and" | "&&")
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{And.left=current}
		public Action getAndLeftAction_1_0_0() { return cAndLeftAction_1_0_0; }

		//"and" | "&&"
		public Alternatives getAlternatives_1_0_1() { return cAlternatives_1_0_1; }

		//"and"
		public Keyword getAndKeyword_1_0_1_0() { return cAndKeyword_1_0_1_0; }

		//"&&"
		public Keyword getAmpersandAmpersandKeyword_1_0_1_1() { return cAmpersandAmpersandKeyword_1_0_1_1; }

		//right=Addition
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//Addition
		public RuleCall getRightAdditionParserRuleCall_1_1_0() { return cRightAdditionParserRuleCall_1_1_0; }
	}

	public class AdditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Addition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cPlusLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cMinusLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightMultiplicationParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Addition returns Expression:
		//	Multiplication (({Plus.left=current} "+" | {Minus.left=current} "-") right=Multiplication)*;
		public ParserRule getRule() { return rule; }

		//Multiplication (({Plus.left=current} "+" | {Minus.left=current} "-") right=Multiplication)*
		public Group getGroup() { return cGroup; }

		//Multiplication
		public RuleCall getMultiplicationParserRuleCall_0() { return cMultiplicationParserRuleCall_0; }

		//(({Plus.left=current} "+" | {Minus.left=current} "-") right=Multiplication)*
		public Group getGroup_1() { return cGroup_1; }

		//{Plus.left=current} "+" | {Minus.left=current} "-"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//{Plus.left=current} "+"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{Plus.left=current}
		public Action getPlusLeftAction_1_0_0_0() { return cPlusLeftAction_1_0_0_0; }

		//"+"
		public Keyword getPlusSignKeyword_1_0_0_1() { return cPlusSignKeyword_1_0_0_1; }

		//{Minus.left=current} "-"
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//{Minus.left=current}
		public Action getMinusLeftAction_1_0_1_0() { return cMinusLeftAction_1_0_1_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1_0_1_1() { return cHyphenMinusKeyword_1_0_1_1; }

		//right=Multiplication
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//Multiplication
		public RuleCall getRightMultiplicationParserRuleCall_1_1_0() { return cRightMultiplicationParserRuleCall_1_1_0; }
	}

	public class MultiplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Multiplication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cMultiLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cDivLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cSolidusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightPrimaryExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Multiplication returns Expression:
		//	PrimaryExpression (({Multi.left=current} "*" | {Div.left=current} "/") right=PrimaryExpression)*;
		public ParserRule getRule() { return rule; }

		//PrimaryExpression (({Multi.left=current} "*" | {Div.left=current} "/") right=PrimaryExpression)*
		public Group getGroup() { return cGroup; }

		//PrimaryExpression
		public RuleCall getPrimaryExpressionParserRuleCall_0() { return cPrimaryExpressionParserRuleCall_0; }

		//(({Multi.left=current} "*" | {Div.left=current} "/") right=PrimaryExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{Multi.left=current} "*" | {Div.left=current} "/"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//{Multi.left=current} "*"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{Multi.left=current}
		public Action getMultiLeftAction_1_0_0_0() { return cMultiLeftAction_1_0_0_0; }

		//"*"
		public Keyword getAsteriskKeyword_1_0_0_1() { return cAsteriskKeyword_1_0_0_1; }

		//{Div.left=current} "/"
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//{Div.left=current}
		public Action getDivLeftAction_1_0_1_0() { return cDivLeftAction_1_0_1_0; }

		//"/"
		public Keyword getSolidusKeyword_1_0_1_1() { return cSolidusKeyword_1_0_1_1; }

		//right=PrimaryExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//PrimaryExpression
		public RuleCall getRightPrimaryExpressionParserRuleCall_1_1_0() { return cRightPrimaryExpressionParserRuleCall_1_1_0; }
	}

	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cUnitaryMinusAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpressionPrimaryExpressionParserRuleCall_1_2_0 = (RuleCall)cExpressionAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cRealLiteralAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueREALTerminalRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cIntLiteralAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_3_1_0 = (RuleCall)cValueAssignment_3_1.eContents().get(0);
		private final RuleCall cFunctionCallParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cPostfixParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cStringLiteralAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Assignment cValueAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_6_1_0 = (RuleCall)cValueAssignment_6_1.eContents().get(0);
		private final RuleCall cArrayLiteralParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cFunctionDeclarationParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Action cNullLiteralAction_9_0 = (Action)cGroup_9.eContents().get(0);
		private final Keyword cNullKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		private final Group cGroup_10 = (Group)cAlternatives.eContents().get(10);
		private final Action cFalseLiteralAction_10_0 = (Action)cGroup_10.eContents().get(0);
		private final Keyword cFalseKeyword_10_1 = (Keyword)cGroup_10.eContents().get(1);
		private final Group cGroup_11 = (Group)cAlternatives.eContents().get(11);
		private final Action cTrueLiteralAction_11_0 = (Action)cGroup_11.eContents().get(0);
		private final Keyword cTrueKeyword_11_1 = (Keyword)cGroup_11.eContents().get(1);
		
		//PrimaryExpression returns Expression:
		//	"(" Expression ")" | {UnitaryMinus} "-" expression=PrimaryExpression | {RealLiteral} value=REAL | {IntLiteral}
		//	value=INT | FunctionCall | Postfix | {StringLiteral} value=STRING | ArrayLiteral | FunctionDeclaration | {NullLiteral}
		//	"null" | {FalseLiteral} "false" | {TrueLiteral} "true";
		public ParserRule getRule() { return rule; }

		//"(" Expression ")" | {UnitaryMinus} "-" expression=PrimaryExpression | {RealLiteral} value=REAL | {IntLiteral} value=INT
		//| FunctionCall | Postfix | {StringLiteral} value=STRING | ArrayLiteral | FunctionDeclaration | {NullLiteral} "null" |
		//{FalseLiteral} "false" | {TrueLiteral} "true"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"(" Expression ")"
		public Group getGroup_0() { return cGroup_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }

		//Expression
		public RuleCall getExpressionParserRuleCall_0_1() { return cExpressionParserRuleCall_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }

		//{UnitaryMinus} "-" expression=PrimaryExpression
		public Group getGroup_1() { return cGroup_1; }

		//{UnitaryMinus}
		public Action getUnitaryMinusAction_1_0() { return cUnitaryMinusAction_1_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1_1() { return cHyphenMinusKeyword_1_1; }

		//expression=PrimaryExpression
		public Assignment getExpressionAssignment_1_2() { return cExpressionAssignment_1_2; }

		//PrimaryExpression
		public RuleCall getExpressionPrimaryExpressionParserRuleCall_1_2_0() { return cExpressionPrimaryExpressionParserRuleCall_1_2_0; }

		//{RealLiteral} value=REAL
		public Group getGroup_2() { return cGroup_2; }

		//{RealLiteral}
		public Action getRealLiteralAction_2_0() { return cRealLiteralAction_2_0; }

		//value=REAL
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }

		//REAL
		public RuleCall getValueREALTerminalRuleCall_2_1_0() { return cValueREALTerminalRuleCall_2_1_0; }

		//{IntLiteral} value=INT
		public Group getGroup_3() { return cGroup_3; }

		//{IntLiteral}
		public Action getIntLiteralAction_3_0() { return cIntLiteralAction_3_0; }

		//value=INT
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_3_1_0() { return cValueINTTerminalRuleCall_3_1_0; }

		//FunctionCall
		public RuleCall getFunctionCallParserRuleCall_4() { return cFunctionCallParserRuleCall_4; }

		//Postfix
		public RuleCall getPostfixParserRuleCall_5() { return cPostfixParserRuleCall_5; }

		//{StringLiteral} value=STRING
		public Group getGroup_6() { return cGroup_6; }

		//{StringLiteral}
		public Action getStringLiteralAction_6_0() { return cStringLiteralAction_6_0; }

		//value=STRING
		public Assignment getValueAssignment_6_1() { return cValueAssignment_6_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_6_1_0() { return cValueSTRINGTerminalRuleCall_6_1_0; }

		//ArrayLiteral
		public RuleCall getArrayLiteralParserRuleCall_7() { return cArrayLiteralParserRuleCall_7; }

		//FunctionDeclaration
		public RuleCall getFunctionDeclarationParserRuleCall_8() { return cFunctionDeclarationParserRuleCall_8; }

		//{NullLiteral} "null"
		public Group getGroup_9() { return cGroup_9; }

		//{NullLiteral}
		public Action getNullLiteralAction_9_0() { return cNullLiteralAction_9_0; }

		//"null"
		public Keyword getNullKeyword_9_1() { return cNullKeyword_9_1; }

		//{FalseLiteral} "false"
		public Group getGroup_10() { return cGroup_10; }

		//{FalseLiteral}
		public Action getFalseLiteralAction_10_0() { return cFalseLiteralAction_10_0; }

		//"false"
		public Keyword getFalseKeyword_10_1() { return cFalseKeyword_10_1; }

		//{TrueLiteral} "true"
		public Group getGroup_11() { return cGroup_11; }

		//{TrueLiteral}
		public Action getTrueLiteralAction_11_0() { return cTrueLiteralAction_11_0; }

		//"true"
		public Keyword getTrueKeyword_11_1() { return cTrueKeyword_11_1; }
	}

	public class ArrayLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArrayLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cArrayLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cValuesAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cValuesExpressionParserRuleCall_2_0_0 = (RuleCall)cValuesAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cValuesAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cValuesExpressionParserRuleCall_2_1_1_0 = (RuleCall)cValuesAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ArrayLiteral:
		//	{ArrayLiteral} "[" (values+=Expression ("," values+=Expression)*)? "]";
		public ParserRule getRule() { return rule; }

		//{ArrayLiteral} "[" (values+=Expression ("," values+=Expression)*)? "]"
		public Group getGroup() { return cGroup; }

		//{ArrayLiteral}
		public Action getArrayLiteralAction_0() { return cArrayLiteralAction_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//(values+=Expression ("," values+=Expression)*)?
		public Group getGroup_2() { return cGroup_2; }

		//values+=Expression
		public Assignment getValuesAssignment_2_0() { return cValuesAssignment_2_0; }

		//Expression
		public RuleCall getValuesExpressionParserRuleCall_2_0_0() { return cValuesExpressionParserRuleCall_2_0_0; }

		//("," values+=Expression)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//values+=Expression
		public Assignment getValuesAssignment_2_1_1() { return cValuesAssignment_2_1_1; }

		//Expression
		public RuleCall getValuesExpressionParserRuleCall_2_1_1_0() { return cValuesExpressionParserRuleCall_2_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class VariableReferenceableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableReferenceable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLocalDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cGlobalDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cParameterDeclarationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//VariableReferenceable:
		//	LocalDeclaration | GlobalDeclaration | ParameterDeclaration;
		public ParserRule getRule() { return rule; }

		//LocalDeclaration | GlobalDeclaration | ParameterDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }

		//LocalDeclaration
		public RuleCall getLocalDeclarationParserRuleCall_0() { return cLocalDeclarationParserRuleCall_0; }

		//GlobalDeclaration
		public RuleCall getGlobalDeclarationParserRuleCall_1() { return cGlobalDeclarationParserRuleCall_1; }

		//ParameterDeclaration
		public RuleCall getParameterDeclarationParserRuleCall_2() { return cParameterDeclarationParserRuleCall_2; }
	}

	public class PostfixElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Postfix");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cVariableReferenceParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cPostfixDecrementValueAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cHyphenMinusHyphenMinusKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cPostfixIncrementValueAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Keyword cPlusSignPlusSignKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		
		//Postfix:
		//	VariableReference ({PostfixDecrement.value=current} "--" | {PostfixIncrement.value=current} "++")?;
		public ParserRule getRule() { return rule; }

		//VariableReference ({PostfixDecrement.value=current} "--" | {PostfixIncrement.value=current} "++")?
		public Group getGroup() { return cGroup; }

		//VariableReference
		public RuleCall getVariableReferenceParserRuleCall_0() { return cVariableReferenceParserRuleCall_0; }

		//({PostfixDecrement.value=current} "--" | {PostfixIncrement.value=current} "++")?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//{PostfixDecrement.value=current} "--"
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{PostfixDecrement.value=current}
		public Action getPostfixDecrementValueAction_1_0_0() { return cPostfixDecrementValueAction_1_0_0; }

		//"--"
		public Keyword getHyphenMinusHyphenMinusKeyword_1_0_1() { return cHyphenMinusHyphenMinusKeyword_1_0_1; }

		//{PostfixIncrement.value=current} "++"
		public Group getGroup_1_1() { return cGroup_1_1; }

		//{PostfixIncrement.value=current}
		public Action getPostfixIncrementValueAction_1_1_0() { return cPostfixIncrementValueAction_1_1_0; }

		//"++"
		public Keyword getPlusSignPlusSignKeyword_1_1_1() { return cPlusSignPlusSignKeyword_1_1_1; }
	}

	public class VariableReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariableAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cVariableVariableReferenceableCrossReference_0_0 = (CrossReference)cVariableAssignment_0.eContents().get(0);
		private final RuleCall cVariableVariableReferenceableIDTerminalRuleCall_0_0_1 = (RuleCall)cVariableVariableReferenceableCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cDimensionsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDimensionsExpressionParserRuleCall_1_1_0 = (RuleCall)cDimensionsAssignment_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//VariableReference:
		//	variable=[VariableReferenceable] ("[" dimensions+=Expression "]")*;
		public ParserRule getRule() { return rule; }

		//variable=[VariableReferenceable] ("[" dimensions+=Expression "]")*
		public Group getGroup() { return cGroup; }

		//variable=[VariableReferenceable]
		public Assignment getVariableAssignment_0() { return cVariableAssignment_0; }

		//[VariableReferenceable]
		public CrossReference getVariableVariableReferenceableCrossReference_0_0() { return cVariableVariableReferenceableCrossReference_0_0; }

		//ID
		public RuleCall getVariableVariableReferenceableIDTerminalRuleCall_0_0_1() { return cVariableVariableReferenceableIDTerminalRuleCall_0_0_1; }

		//("[" dimensions+=Expression "]")*
		public Group getGroup_1() { return cGroup_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }

		//dimensions+=Expression
		public Assignment getDimensionsAssignment_1_1() { return cDimensionsAssignment_1_1; }

		//Expression
		public RuleCall getDimensionsExpressionParserRuleCall_1_1_0() { return cDimensionsExpressionParserRuleCall_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }
	}

	public class FunctionCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFunctionCallAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cFunctionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cFunctionFunctionDeclarationCrossReference_1_0 = (CrossReference)cFunctionAssignment_1.eContents().get(0);
		private final RuleCall cFunctionFunctionDeclarationIDTerminalRuleCall_1_0_1 = (RuleCall)cFunctionFunctionDeclarationCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cArgsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cArgsExpressionParserRuleCall_3_0_0 = (RuleCall)cArgsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cArgsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cArgsExpressionParserRuleCall_3_1_1_0 = (RuleCall)cArgsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//FunctionCall:
		//	{FunctionCall} function=[FunctionDeclaration] "(" (args+=Expression ("," args+=Expression)*)? ")";
		public ParserRule getRule() { return rule; }

		//{FunctionCall} function=[FunctionDeclaration] "(" (args+=Expression ("," args+=Expression)*)? ")"
		public Group getGroup() { return cGroup; }

		//{FunctionCall}
		public Action getFunctionCallAction_0() { return cFunctionCallAction_0; }

		//function=[FunctionDeclaration]
		public Assignment getFunctionAssignment_1() { return cFunctionAssignment_1; }

		//[FunctionDeclaration]
		public CrossReference getFunctionFunctionDeclarationCrossReference_1_0() { return cFunctionFunctionDeclarationCrossReference_1_0; }

		//ID
		public RuleCall getFunctionFunctionDeclarationIDTerminalRuleCall_1_0_1() { return cFunctionFunctionDeclarationIDTerminalRuleCall_1_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(args+=Expression ("," args+=Expression)*)?
		public Group getGroup_3() { return cGroup_3; }

		//args+=Expression
		public Assignment getArgsAssignment_3_0() { return cArgsAssignment_3_0; }

		//Expression
		public RuleCall getArgsExpressionParserRuleCall_3_0_0() { return cArgsExpressionParserRuleCall_3_0_0; }

		//("," args+=Expression)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//args+=Expression
		public Assignment getArgsAssignment_3_1_1() { return cArgsAssignment_3_1_1; }

		//Expression
		public RuleCall getArgsExpressionParserRuleCall_3_1_1_0() { return cArgsExpressionParserRuleCall_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class ReturnStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReturnStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReturnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueExpressionParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//ReturnStatement:
		//	"return" value=Expression;
		public ParserRule getRule() { return rule; }

		//"return" value=Expression
		public Group getGroup() { return cGroup; }

		//"return"
		public Keyword getReturnKeyword_0() { return cReturnKeyword_0; }

		//value=Expression
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//Expression
		public RuleCall getValueExpressionParserRuleCall_1_0() { return cValueExpressionParserRuleCall_1_0; }
	}

	public class IncludeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Include");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIncludeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cImportURIAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cImportURISTRINGTerminalRuleCall_2_0 = (RuleCall)cImportURIAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Include:
		//	"include" "(" importURI=STRING ")";
		public ParserRule getRule() { return rule; }

		//"include" "(" importURI=STRING ")"
		public Group getGroup() { return cGroup; }

		//"include"
		public Keyword getIncludeKeyword_0() { return cIncludeKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//importURI=STRING
		public Assignment getImportURIAssignment_2() { return cImportURIAssignment_2; }

		//STRING
		public RuleCall getImportURISTRINGTerminalRuleCall_2_0() { return cImportURISTRINGTerminalRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	
	
	private final ScriptElements pScript;
	private final StatementElements pStatement;
	private final BreakStatementElements pBreakStatement;
	private final ContinueStatementElements pContinueStatement;
	private final StatementBlockElements pStatementBlock;
	private final AffectationElements pAffectation;
	private final IfElements pIf;
	private final IterationElements pIteration;
	private final WhileElements pWhile;
	private final ForElements pFor;
	private final ForInElements pForIn;
	private final ForInVariableReferenceElements pForInVariableReference;
	private final ForInitializerElements pForInitializer;
	private final FunctionDeclarationElements pFunctionDeclaration;
	private final ParameterDeclarationElements pParameterDeclaration;
	private final LocalDeclarationElements pLocalDeclaration;
	private final GlobalDeclarationElements pGlobalDeclaration;
	private final VariableDeclarationElements pVariableDeclaration;
	private final ExpressionElements pExpression;
	private final ComparisonElements pComparison;
	private final OrElements pOr;
	private final AndElements pAnd;
	private final AdditionElements pAddition;
	private final MultiplicationElements pMultiplication;
	private final PrimaryExpressionElements pPrimaryExpression;
	private final ArrayLiteralElements pArrayLiteral;
	private final VariableReferenceableElements pVariableReferenceable;
	private final PostfixElements pPostfix;
	private final VariableReferenceElements pVariableReference;
	private final FunctionCallElements pFunctionCall;
	private final ReturnStatementElements pReturnStatement;
	private final IncludeElements pInclude;
	private final TerminalRule tREAL;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public LeekGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pScript = new ScriptElements();
		this.pStatement = new StatementElements();
		this.pBreakStatement = new BreakStatementElements();
		this.pContinueStatement = new ContinueStatementElements();
		this.pStatementBlock = new StatementBlockElements();
		this.pAffectation = new AffectationElements();
		this.pIf = new IfElements();
		this.pIteration = new IterationElements();
		this.pWhile = new WhileElements();
		this.pFor = new ForElements();
		this.pForIn = new ForInElements();
		this.pForInVariableReference = new ForInVariableReferenceElements();
		this.pForInitializer = new ForInitializerElements();
		this.pFunctionDeclaration = new FunctionDeclarationElements();
		this.pParameterDeclaration = new ParameterDeclarationElements();
		this.pLocalDeclaration = new LocalDeclarationElements();
		this.pGlobalDeclaration = new GlobalDeclarationElements();
		this.pVariableDeclaration = new VariableDeclarationElements();
		this.pExpression = new ExpressionElements();
		this.pComparison = new ComparisonElements();
		this.pOr = new OrElements();
		this.pAnd = new AndElements();
		this.pAddition = new AdditionElements();
		this.pMultiplication = new MultiplicationElements();
		this.pPrimaryExpression = new PrimaryExpressionElements();
		this.pArrayLiteral = new ArrayLiteralElements();
		this.pVariableReferenceable = new VariableReferenceableElements();
		this.pPostfix = new PostfixElements();
		this.pVariableReference = new VariableReferenceElements();
		this.pFunctionCall = new FunctionCallElements();
		this.pReturnStatement = new ReturnStatementElements();
		this.pInclude = new IncludeElements();
		this.tREAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "REAL");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.processus.ecleek.Leek".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Script:
	//	statements+=Statement*;
	public ScriptElements getScriptAccess() {
		return pScript;
	}
	
	public ParserRule getScriptRule() {
		return getScriptAccess().getRule();
	}

	//Statement:
	//	Include ";" //	| Postfix ';'
	//	| GlobalDeclaration ";" | FunctionDeclaration | LocalDeclaration ";" | FunctionCall ";" | Iteration | If | Affectation
	//	";" | StatementBlock | ReturnStatement ";" | BreakStatement ";" | ContinueStatement ";" | {EmptyStatement} ";";
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//BreakStatement:
	//	{BreakStatement} "break";
	public BreakStatementElements getBreakStatementAccess() {
		return pBreakStatement;
	}
	
	public ParserRule getBreakStatementRule() {
		return getBreakStatementAccess().getRule();
	}

	//ContinueStatement:
	//	{ContinueStatement} "continue";
	public ContinueStatementElements getContinueStatementAccess() {
		return pContinueStatement;
	}
	
	public ParserRule getContinueStatementRule() {
		return getContinueStatementAccess().getRule();
	}

	//StatementBlock:
	//	"{" {StatementBlock} statements+=Statement* "}";
	public StatementBlockElements getStatementBlockAccess() {
		return pStatementBlock;
	}
	
	public ParserRule getStatementBlockRule() {
		return getStatementBlockAccess().getRule();
	}

	//Affectation:
	//	variable=VariableReference "=" value=Expression;
	public AffectationElements getAffectationAccess() {
		return pAffectation;
	}
	
	public ParserRule getAffectationRule() {
		return getAffectationAccess().getRule();
	}

	//If:
	//	"if" "(" condition=Expression ")" then=Statement ("else" else=Statement)?;
	public IfElements getIfAccess() {
		return pIf;
	}
	
	public ParserRule getIfRule() {
		return getIfAccess().getRule();
	}

	//Iteration:
	//	While | ForIn | For;
	public IterationElements getIterationAccess() {
		return pIteration;
	}
	
	public ParserRule getIterationRule() {
		return getIterationAccess().getRule();
	}

	//While:
	//	"while" "(" condition=Expression ")" statement=Statement;
	public WhileElements getWhileAccess() {
		return pWhile;
	}
	
	public ParserRule getWhileRule() {
		return getWhileAccess().getRule();
	}

	//For:
	//	"for" "(" initializer=ForInitializer ";" condition=Expression ";" increment=Expression ")" statement=Statement;
	public ForElements getForAccess() {
		return pFor;
	}
	
	public ParserRule getForRule() {
		return getForAccess().getRule();
	}

	//ForIn:
	//	"for" "(" (key=ForInVariableReference ":")? value=ForInVariableReference "in" array=Expression ")"
	//	statement=Statement;
	public ForInElements getForInAccess() {
		return pForIn;
	}
	
	public ParserRule getForInRule() {
		return getForInAccess().getRule();
	}

	//ForInVariableReference returns VariableReference:
	//	"var" name=ID | variable=[VariableReference];
	public ForInVariableReferenceElements getForInVariableReferenceAccess() {
		return pForInVariableReference;
	}
	
	public ParserRule getForInVariableReferenceRule() {
		return getForInVariableReferenceAccess().getRule();
	}

	//ForInitializer:
	//	VariableReference;
	public ForInitializerElements getForInitializerAccess() {
		return pForInitializer;
	}
	
	public ParserRule getForInitializerRule() {
		return getForInitializerAccess().getRule();
	}

	//FunctionDeclaration:
	//	"function" name=ID "(" (parameters+=ParameterDeclaration ("," parameters+=ParameterDeclaration)*)? ")"
	//	body=StatementBlock;
	public FunctionDeclarationElements getFunctionDeclarationAccess() {
		return pFunctionDeclaration;
	}
	
	public ParserRule getFunctionDeclarationRule() {
		return getFunctionDeclarationAccess().getRule();
	}

	//ParameterDeclaration returns VariableReferenceable:
	//	byAdress?="@"? name=ID;
	public ParameterDeclarationElements getParameterDeclarationAccess() {
		return pParameterDeclaration;
	}
	
	public ParserRule getParameterDeclarationRule() {
		return getParameterDeclarationAccess().getRule();
	}

	//LocalDeclaration:
	//	"var" variables+=VariableDeclaration ("," variables+=VariableDeclaration)*;
	public LocalDeclarationElements getLocalDeclarationAccess() {
		return pLocalDeclaration;
	}
	
	public ParserRule getLocalDeclarationRule() {
		return getLocalDeclarationAccess().getRule();
	}

	//GlobalDeclaration:
	//	"global" variables+=VariableDeclaration ("," variables+=VariableDeclaration)*;
	public GlobalDeclarationElements getGlobalDeclarationAccess() {
		return pGlobalDeclaration;
	}
	
	public ParserRule getGlobalDeclarationRule() {
		return getGlobalDeclarationAccess().getRule();
	}

	//VariableDeclaration:
	//	name=ID ("=" value=Expression)?;
	public VariableDeclarationElements getVariableDeclarationAccess() {
		return pVariableDeclaration;
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}

	//Expression:
	//	Comparison;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//Comparison returns Expression:
	//	Or (({Comparison.left=current} "===" | {Equals.left=current} "==" | {TypedDifferent.left=current} "!==" |
	//	{Different.left=current} "!=" | {LessOrEquals.left=current} "<=" | {Less.left=current} "<" |
	//	{MoreOrEquals.left=current} ">=" | {More.left=current} ">") right=Or)*;
	public ComparisonElements getComparisonAccess() {
		return pComparison;
	}
	
	public ParserRule getComparisonRule() {
		return getComparisonAccess().getRule();
	}

	//Or returns Expression:
	//	And (({Or.left=current} ("or" | "||")) right=And)*;
	public OrElements getOrAccess() {
		return pOr;
	}
	
	public ParserRule getOrRule() {
		return getOrAccess().getRule();
	}

	//And returns Expression:
	//	Addition (({And.left=current} ("and" | "&&")) right=Addition)*;
	public AndElements getAndAccess() {
		return pAnd;
	}
	
	public ParserRule getAndRule() {
		return getAndAccess().getRule();
	}

	//Addition returns Expression:
	//	Multiplication (({Plus.left=current} "+" | {Minus.left=current} "-") right=Multiplication)*;
	public AdditionElements getAdditionAccess() {
		return pAddition;
	}
	
	public ParserRule getAdditionRule() {
		return getAdditionAccess().getRule();
	}

	//Multiplication returns Expression:
	//	PrimaryExpression (({Multi.left=current} "*" | {Div.left=current} "/") right=PrimaryExpression)*;
	public MultiplicationElements getMultiplicationAccess() {
		return pMultiplication;
	}
	
	public ParserRule getMultiplicationRule() {
		return getMultiplicationAccess().getRule();
	}

	//PrimaryExpression returns Expression:
	//	"(" Expression ")" | {UnitaryMinus} "-" expression=PrimaryExpression | {RealLiteral} value=REAL | {IntLiteral}
	//	value=INT | FunctionCall | Postfix | {StringLiteral} value=STRING | ArrayLiteral | FunctionDeclaration | {NullLiteral}
	//	"null" | {FalseLiteral} "false" | {TrueLiteral} "true";
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return pPrimaryExpression;
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}

	//ArrayLiteral:
	//	{ArrayLiteral} "[" (values+=Expression ("," values+=Expression)*)? "]";
	public ArrayLiteralElements getArrayLiteralAccess() {
		return pArrayLiteral;
	}
	
	public ParserRule getArrayLiteralRule() {
		return getArrayLiteralAccess().getRule();
	}

	//VariableReferenceable:
	//	LocalDeclaration | GlobalDeclaration | ParameterDeclaration;
	public VariableReferenceableElements getVariableReferenceableAccess() {
		return pVariableReferenceable;
	}
	
	public ParserRule getVariableReferenceableRule() {
		return getVariableReferenceableAccess().getRule();
	}

	//Postfix:
	//	VariableReference ({PostfixDecrement.value=current} "--" | {PostfixIncrement.value=current} "++")?;
	public PostfixElements getPostfixAccess() {
		return pPostfix;
	}
	
	public ParserRule getPostfixRule() {
		return getPostfixAccess().getRule();
	}

	//VariableReference:
	//	variable=[VariableReferenceable] ("[" dimensions+=Expression "]")*;
	public VariableReferenceElements getVariableReferenceAccess() {
		return pVariableReference;
	}
	
	public ParserRule getVariableReferenceRule() {
		return getVariableReferenceAccess().getRule();
	}

	//FunctionCall:
	//	{FunctionCall} function=[FunctionDeclaration] "(" (args+=Expression ("," args+=Expression)*)? ")";
	public FunctionCallElements getFunctionCallAccess() {
		return pFunctionCall;
	}
	
	public ParserRule getFunctionCallRule() {
		return getFunctionCallAccess().getRule();
	}

	//ReturnStatement:
	//	"return" value=Expression;
	public ReturnStatementElements getReturnStatementAccess() {
		return pReturnStatement;
	}
	
	public ParserRule getReturnStatementRule() {
		return getReturnStatementAccess().getRule();
	}

	//Include:
	//	"include" "(" importURI=STRING ")";
	public IncludeElements getIncludeAccess() {
		return pInclude;
	}
	
	public ParserRule getIncludeRule() {
		return getIncludeAccess().getRule();
	}

	//terminal REAL returns ecore::EDouble:
	//	"0".."9"* "." "0".."9"+;
	public TerminalRule getREALRule() {
		return tREAL;
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
